diff --git a/compiled/flipclock.js b/compiled/flipclock.js
index 8d97c49..26ea1a5 100644
--- a/compiled/flipclock.js
+++ b/compiled/flipclock.js
@@ -9,24 +9,24 @@ var Base = function() {
 };
 
 Base.extend = function(_instance, _static) { // subclass
-	
+
 	"use strict";
-	
+
 	var extend = Base.prototype.extend;
-	
+
 	// build the prototype
 	Base._prototyping = true;
-	
+
 	var proto = new this();
-	
+
 	extend.call(proto, _instance);
-	
+
 	proto.base = function() {
 	// call this method from any other method to invoke that method's ancestor
 	};
 
 	delete Base._prototyping;
-	
+
 	// create the wrapper for the constructor function
 	//var constructor = proto.constructor.valueOf(); //-dean
 	var constructor = proto.constructor;
@@ -41,7 +41,7 @@ Base.extend = function(_instance, _static) { // subclass
 			}
 		}
 	};
-	
+
 	// build the class interface
 	klass.ancestor = this;
 	klass.extend = this.extend;
@@ -59,7 +59,7 @@ Base.extend = function(_instance, _static) { // subclass
 	return klass;
 };
 
-Base.prototype = {	
+Base.prototype = {
 	extend: function(source, value) {
 		if (arguments.length > 1) { // extending with a name/value pair
 			var ancestor = this[source];
@@ -118,7 +118,7 @@ Base = Base.extend({
 }, {
 	ancestor: Object,
 	version: "1.1",
-	
+
 	forEach: function(object, block, context) {
 		for (var key in object) {
 			if (this.prototype[key] === undefined) {
@@ -126,7 +126,7 @@ Base = Base.extend({
 			}
 		}
 	},
-		
+
 	implement: function() {
 		for (var i = 0; i < arguments.length; i++) {
 			if (typeof arguments[i] == "function") {
@@ -139,7 +139,7 @@ Base = Base.extend({
 		}
 		return this;
 	},
-	
+
 	toString: function() {
 		return String(this.valueOf());
 	}
@@ -147,7 +147,7 @@ Base = Base.extend({
 /*jshint smarttabs:true */
 
 var FlipClock;
-	
+
 /**
  * FlipClock.js
  *
@@ -155,19 +155,19 @@ var FlipClock;
  * @copyright  2013 - Objective HTML, LLC
  * @licesnse   http://www.opensource.org/licenses/mit-license.php
  */
-	
+
 (function($) {
-	
+
 	"use strict";
-	
+
 	/**
 	 * FlipFlock Helper
 	 *
 	 * @param  object  A jQuery object or CSS select
 	 * @param  int     An integer used to start the clock (no. seconds)
-	 * @param  object  An object of properties to override the default	
+	 * @param  object  An object of properties to override the default
 	 */
-	 
+
 	FlipClock = function(obj, digit, options) {
 		if(digit instanceof Object && digit instanceof Date === false) {
 			options = digit;
@@ -182,36 +182,36 @@ var FlipClock;
 	 */
 
 	FlipClock.Lang = {};
-	
+
 	/**
 	 * The Base FlipClock class is used to extend all other FlipFlock
 	 * classes. It handles the callbacks and the basic setters/getters
-	 *	
+	 *
 	 * @param 	object  An object of the default properties
-	 * @param 	object  An object of properties to override the default	
+	 * @param 	object  An object of properties to override the default
 	 */
 
 	FlipClock.Base = Base.extend({
-		
+
 		/**
 		 * Build Date
 		 */
-		 
+
 		buildDate: '2014-12-12',
-		
+
 		/**
 		 * Version
 		 */
-		 
+
 		version: '0.7.7',
-		
+
 		/**
 		 * Sets the default options
 		 *
 		 * @param	object 	The default options
 		 * @param	object 	The override options
 		 */
-		 
+
 		constructor: function(_default, options) {
 			if(typeof _default !== "object") {
 				_default = {};
@@ -221,83 +221,83 @@ var FlipClock;
 			}
 			this.setOptions($.extend(true, {}, _default, options));
 		},
-		
+
 		/**
 		 * Delegates the callback to the defined method
 		 *
 		 * @param	object 	The default options
 		 * @param	object 	The override options
 		 */
-		 
+
 		callback: function(method) {
 		 	if(typeof method === "function") {
 				var args = [];
-								
+
 				for(var x = 1; x <= arguments.length; x++) {
 					if(arguments[x]) {
 						args.push(arguments[x]);
 					}
 				}
-				
+
 				method.apply(this, args);
 			}
 		},
-		 
+
 		/**
 		 * Log a string into the console if it exists
 		 *
 		 * @param 	string 	The name of the option
 		 * @return	mixed
-		 */		
-		 
+		 */
+
 		log: function(str) {
 			if(window.console && console.log) {
 				console.log(str);
 			}
 		},
-		 
+
 		/**
 		 * Get an single option value. Returns false if option does not exist
 		 *
 		 * @param 	string 	The name of the option
 		 * @return	mixed
-		 */		
-		 
+		 */
+
 		getOption: function(index) {
 			if(this[index]) {
 				return this[index];
 			}
 			return false;
 		},
-		
+
 		/**
 		 * Get all options
 		 *
 		 * @return	bool
-		 */		
-		 
+		 */
+
 		getOptions: function() {
 			return this;
 		},
-		
+
 		/**
 		 * Set a single option value
 		 *
 		 * @param 	string 	The name of the option
 		 * @param 	mixed 	The value of the option
-		 */		
-		 
+		 */
+
 		setOption: function(index, value) {
 			this[index] = value;
 		},
-		
+
 		/**
 		 * Set a multiple options by passing a JSON object
 		 *
 		 * @param 	object 	The object with the options
 		 * @param 	mixed 	The value of the option
-		 */		
-		
+		 */
+
 		setOptions: function(options) {
 			for(var key in options) {
 	  			if(typeof options[key] !== "undefined") {
@@ -305,9 +305,9 @@ var FlipClock;
 		  		}
 		  	}
 		}
-		
+
 	});
-	
+
 }(jQuery));
 
 /*jshint smarttabs:true */
@@ -319,77 +319,77 @@ var FlipClock;
  * @copyright  2013 - Objective HTML, LLC
  * @licesnse   http://www.opensource.org/licenses/mit-license.php
  */
-	
+
 (function($) {
-	
+
 	"use strict";
-	
+
 	/**
 	 * The FlipClock Face class is the base class in which to extend
 	 * all other FlockClock.Face classes.
 	 *
 	 * @param 	object  The parent FlipClock.Factory object
-	 * @param 	object  An object of properties to override the default	
+	 * @param 	object  An object of properties to override the default
 	 */
-	 
+
 	FlipClock.Face = FlipClock.Base.extend({
-		
+
 		/**
 		 * Sets whether or not the clock should start upon instantiation
 		 */
-		 
+
 		autoStart: true,
 
 		/**
 		 * An array of jQuery objects used for the dividers (the colons)
 		 */
-		 
+
 		dividers: [],
 
 		/**
 		 * An array of FlipClock.List objects
-		 */		
-		 
+		 */
+
 		factory: false,
-		
+
 		/**
 		 * An array of FlipClock.List objects
-		 */		
-		 
+		 */
+
 		lists: [],
 
 		/**
 		 * Constructor
 		 *
 		 * @param 	object  The parent FlipClock.Factory object
-		 * @param 	object  An object of properties to override the default	
+		 * @param 	object  An object of properties to override the default
 		 */
-		 
+
 		constructor: function(factory, options) {
 			this.dividers = [];
 			this.lists = [];
 			this.base(options);
 			this.factory = factory;
 		},
-		
+
 		/**
 		 * Build the clock face
 		 */
-		 
+
 		build: function() {
 			if(this.autoStart) {
 				this.start();
 			}
 		},
-		
+
 		/**
 		 * Creates a jQuery object used for the digit divider
 		 *
 		 * @param	mixed 	The divider label text
-		 * @param	mixed	Set true to exclude the dots in the divider. 
+		 * @param	mixed	Set true to exclude the dots in the divider.
 		 *					If not set, is false.
 		 */
-		 
+
 		createDivider: function(label, css, excludeDots) {
 			if(typeof css == "boolean" || !css) {
 				excludeDots = css;
@@ -402,7 +402,7 @@ var FlipClock;
 			].join('');
 
 			if(excludeDots) {
-				dots = '';	
+				dots = '';
 			}
 
 			label = this.factory.localize(label);
@@ -412,22 +412,22 @@ var FlipClock;
 					'<span class="'+this.factory.classes.label+'">'+(label ? label : '')+'</span>',
 					dots,
 				'</span>'
-			];	
-			
+			];
+
 			var $html = $(html.join(''));
 
 			this.dividers.push($html);
 
 			return $html;
 		},
-		
+
 		/**
 		 * Creates a FlipClock.List object and appends it to the DOM
 		 *
 		 * @param	mixed 	The digit to select in the list
 		 * @param	object  An object to override the default properties
 		 */
-		 
+
 		createList: function(digit, options) {
 			if(typeof digit === "object") {
 				options = digit;
@@ -435,19 +435,19 @@ var FlipClock;
 			}
 
 			var obj = new FlipClock.List(this.factory, digit, options);
-		
+
 			this.lists.push(obj);
 
 			return obj;
 		},
-		
+
 		/**
 		 * Triggers when the clock is reset
 		 */
 
 		reset: function() {
 			this.factory.time = new FlipClock.Time(
-				this.factory, 
+				this.factory,
 				this.factory.original ? Math.round(this.factory.original) : 0,
 				{
 					minimumDigits: this.factory.minimumDigits
@@ -468,7 +468,7 @@ var FlipClock;
 		/**
 		 * Add a digit to the clock face
 		 */
-		 
+
 		addDigit: function(digit) {
 			var obj = this.createList(digit, {
 				classes: {
@@ -480,23 +480,23 @@ var FlipClock;
 
 			this.appendDigitToClock(obj);
 		},
-		
+
 		/**
 		 * Triggers when the clock is started
 		 */
-		 
+
 		start: function() {},
-		
+
 		/**
 		 * Triggers when the time on the clock stops
 		 */
-		 
+
 		stop: function() {},
-		
+
 		/**
 		 * Auto increments/decrements the value of the clock face
 		 */
-		 
+
 		autoIncrement: function() {
 			if(!this.factory.countdown) {
 				this.increment();
@@ -509,7 +509,7 @@ var FlipClock;
 		/**
 		 * Increments the value of the clock face
 		 */
-		 
+
 		increment: function() {
 			this.factory.time.addSecond();
 		},
@@ -526,11 +526,11 @@ var FlipClock;
 				this.factory.time.subSecond();
 			}
 		},
-			
+
 		/**
 		 * Triggers when the numbers on the clock flip
 		 */
-		 
+
 		flip: function(time, doNotAddPlayClass) {
 			var t = this;
 
@@ -539,19 +539,19 @@ var FlipClock;
 
 				if(list) {
 					if(!doNotAddPlayClass && digit != list.digit) {
-						list.play();	
+						list.play();
 					}
 
 					list.select(digit);
-				}	
+				}
 				else {
 					t.addDigit(digit);
 				}
 			});
 		}
-					
+
 	});
-	
+
 }(jQuery));
 
 /*jshint smarttabs:true */
@@ -563,44 +563,44 @@ var FlipClock;
  * @copyright  2013 - Objective HTML, LLC
  * @licesnse   http://www.opensource.org/licenses/mit-license.php
  */
-	
+
 (function($) {
-	
+
 	"use strict";
-	
+
 	/**
 	 * The FlipClock Factory class is used to build the clock and manage
 	 * all the public methods.
 	 *
 	 * @param 	object  A jQuery object or CSS selector used to fetch
 	 				    the wrapping DOM nodes
-	 * @param 	mixed   This is the digit used to set the clock. If an 
-	 				    object is passed, 0 will be used.	
-	 * @param 	object  An object of properties to override the default	
+	 * @param 	mixed   This is the digit used to set the clock. If an
+	 				    object is passed, 0 will be used.
+	 * @param 	object  An object of properties to override the default
 	 */
-	 	
+
 	FlipClock.Factory = FlipClock.Base.extend({
-		
+
 		/**
 		 * The clock's animation rate.
-		 * 
+		 *
 		 * Note, currently this property doesn't do anything.
 		 * This property is here to be used in the future to
 		 * programmaticaly set the clock's animation speed
-		 */		
+		 */
 
 		animationRate: 1000,
 
 		/**
 		 * Auto start the clock on page load (True|False)
-		 */	
-		 
+		 */
+
 		autoStart: true,
-		
+
 		/**
 		 * The callback methods
-		 */		
-		 
+		 */
+
 		callbacks: {
 			destroy: false,
 			create: false,
@@ -610,11 +610,11 @@ var FlipClock;
 			stop: false,
 			reset: false
 		},
-		
+
 		/**
 		 * The CSS classes
-		 */		
-		 
+		 */
+
 		classes: {
 			active: 'flip-clock-active',
 			before: 'flip-clock-before',
@@ -625,92 +625,92 @@ var FlipClock;
 			play: 'play',
 			wrapper: 'flip-clock-wrapper'
 		},
-		
+
 		/**
 		 * The name of the clock face class in use
-		 */	
-		 
+		 */
+
 		clockFace: 'HourlyCounter',
-		 
+
 		/**
 		 * The name of the clock face class in use
-		 */	
-		 
+		 */
+
 		countdown: false,
-		 
+
 		/**
 		 * The name of the default clock face class to use if the defined
 		 * clockFace variable is not a valid FlipClock.Face object
-		 */	
-		 
+		 */
+
 		defaultClockFace: 'HourlyCounter',
-		 
+
 		/**
 		 * The default language
-		 */	
-		 
+		 */
+
 		defaultLanguage: 'english',
-		 
+
 		/**
 		 * The jQuery object
-		 */		
-		 
+		 */
+
 		$el: false,
 
 		/**
 		 * The FlipClock.Face object
-		 */	
-		 
+		 */
+
 		face: true,
-		 
+
 		/**
 		 * The language object after it has been loaded
-		 */	
-		 
+		 */
+
 		lang: false,
-		 
+
 		/**
 		 * The language being used to display labels (string)
-		 */	
-		 
+		 */
+
 		language: 'english',
-		 
+
 		/**
 		 * The minimum digits the clock must have
-		 */		
+		 */
 
 		minimumDigits: 0,
 
 		/**
 		 * The original starting value of the clock. Used for the reset method.
-		 */		
-		 
+		 */
+
 		original: false,
-		
+
 		/**
 		 * Is the clock running? (True|False)
-		 */		
-		 
+		 */
+
 		running: false,
-		
+
 		/**
 		 * The FlipClock.Time object
-		 */		
-		 
+		 */
+
 		time: false,
-		
+
 		/**
 		 * The FlipClock.Timer object
-		 */		
-		 
+		 */
+
 		timer: false,
-		
+
 		/**
 		 * The jQuery object (depcrecated)
-		 */		
-		 
+		 */
+
 		$wrapper: false,
-		
+
 		/**
 		 * Constructor
 		 *
@@ -718,7 +718,7 @@ var FlipClock;
 		 * @param	object  Number of seconds used to start the clock
 		 * @param	object 	An object override options
 		 */
-		 
+
 		constructor: function(obj, digit, options) {
 
 			if(!options) {
@@ -727,7 +727,7 @@ var FlipClock;
 
 			this.lists = [];
 			this.running = false;
-			this.base(options);	
+			this.base(options);
 
 			this.$el = $(obj).addClass(this.classes.wrapper);
 
@@ -738,13 +738,13 @@ var FlipClock;
 
 			this.time = new FlipClock.Time(this, this.original, {
 				minimumDigits: this.minimumDigits,
-				animationRate: this.animationRate 
+				animationRate: this.animationRate
 			});
 
 			this.timer = new FlipClock.Timer(this, options);
 
 			this.loadLanguage(this.language);
-			
+
 			this.loadClockFace(this.clockFace, options);
 
 			if(this.autoStart) {
@@ -752,17 +752,17 @@ var FlipClock;
 			}
 
 		},
-		
+
 		/**
 		 * Load the FlipClock.Face object
 		 *
 		 * @param	object  The name of the FlickClock.Face class
 		 * @param	object 	An object override options
 		 */
-		 
-		loadClockFace: function(name, options) {	
+
+		loadClockFace: function(name, options) {
 			var face, suffix = 'Face', hasStopped = false;
-			
+
 			name = name.ucfirst()+suffix;
 
 			if(this.face.stop) {
@@ -773,14 +773,14 @@ var FlipClock;
 			this.$el.html('');
 
 			this.time.minimumDigits = this.minimumDigits;
-			
+
 			if(FlipClock[name]) {
 				face = new FlipClock[name](this, options);
 			}
 			else {
 				face = new FlipClock[this.defaultClockFace+suffix](this, options);
 			}
-			
+
 			face.build();
 
 			this.face = face
@@ -788,19 +788,19 @@ var FlipClock;
 			if(hasStopped) {
 				this.start();
 			}
-			
+
 			return this.face;
 		},
-				
+
 		/**
 		 * Load the FlipClock.Lang object
 		 *
 		 * @param	object  The name of the language to load
 		 */
-		 
-		loadLanguage: function(name) {	
+
+		loadLanguage: function(name) {
 			var lang;
-			
+
 			if(FlipClock.Lang[name.ucfirst()]) {
 				lang = FlipClock.Lang[name.ucfirst()];
 			}
@@ -810,10 +810,10 @@ var FlipClock;
 			else {
 				lang = FlipClock.Lang[this.defaultLanguage];
 			}
-			
+
 			return this.lang = lang;
 		},
-					
+
 		/**
 		 * Localize strings into various languages
 		 *
@@ -840,12 +840,12 @@ var FlipClock;
 
 			return index;
 		},
-		 
+
 
 		/**
 		 * Starts the clock
 		 */
-		 
+
 		start: function(callback) {
 			var t = this;
 
@@ -853,86 +853,86 @@ var FlipClock;
 				t.face.start(t.time);
 				t.timer.start(function() {
 					t.flip();
-					
+
 					if(typeof callback === "function") {
 						callback();
-					}	
+					}
 				});
 			}
 			else {
 				t.log('Trying to start timer when countdown already at 0');
 			}
 		},
-		
+
 		/**
 		 * Stops the clock
 		 */
-		 
+
 		stop: function(callback) {
 			this.face.stop();
 			this.timer.stop(callback);
-			
+
 			for(var x in this.lists) {
 				if (this.lists.hasOwnProperty(x)) {
 					this.lists[x].stop();
 				}
-			}	
+			}
 		},
-		
+
 		/**
 		 * Reset the clock
 		 */
-		 
+
 		reset: function(callback) {
 			this.timer.reset(callback);
 			this.face.reset();
 		},
-		
+
 		/**
 		 * Sets the clock time
 		 */
-		 
+
 		setTime: function(time) {
 			this.time.time = time;
-			this.flip(true);		
+			this.flip(true);
 		},
-		
+
 		/**
 		 * Get the clock time
 		 *
 		 * @return  object  Returns a FlipClock.Time object
 		 */
-		 
+
 		getTime: function(time) {
-			return this.time;		
+			return this.time;
 		},
-		
+
 		/**
 		 * Changes the increment of time to up or down (add/sub)
 		 */
-		 
+
 		setCountdown: function(value) {
 			var running = this.running;
-			
+
 			this.countdown = value ? true : false;
-				
+
 			if(running) {
 				this.stop();
 				this.start();
 			}
 		},
-		
+
 		/**
 		 * Flip the digits on the clock
 		 *
-		 * @param  array  An array of digits	 
+		 * @param  array  An array of digits
 		 */
-		flip: function(doNotAddPlayClass) {	
+		flip: function(doNotAddPlayClass) {
 			this.face.flip(false, doNotAddPlayClass);
 		}
-		
+
 	});
-		
+
 }(jQuery));
 
 /*jshint smarttabs:true */
@@ -944,84 +944,84 @@ var FlipClock;
  * @copyright  2013 - Objective HTML, LLC
  * @licesnse   http://www.opensource.org/licenses/mit-license.php
  */
-	
+
 (function($) {
-	
+
 	"use strict";
-	
+
 	/**
-	 * The FlipClock List class is used to build the list used to create 
+	 * The FlipClock List class is used to build the list used to create
 	 * the card flip effect. This object fascilates selecting the correct
 	 * node by passing a specific digit.
 	 *
 	 * @param 	object  A FlipClock.Factory object
-	 * @param 	mixed   This is the digit used to set the clock. If an 
-	 *				    object is passed, 0 will be used.	
-	 * @param 	object  An object of properties to override the default	
+	 * @param 	mixed   This is the digit used to set the clock. If an
+	 *				    object is passed, 0 will be used.
+	 * @param 	object  An object of properties to override the default
 	 */
-	 	
+
 	FlipClock.List = FlipClock.Base.extend({
-		
+
 		/**
 		 * The digit (0-9)
-		 */		
-		 
+		 */
+
 		digit: 0,
-		
+
 		/**
 		 * The CSS classes
-		 */		
-		 
+		 */
+
 		classes: {
 			active: 'flip-clock-active',
 			before: 'flip-clock-before',
-			flip: 'flip'	
+			flip: 'flip'
 		},
-				
+
 		/**
 		 * The parent FlipClock.Factory object
-		 */		
-		 
+		 */
+
 		factory: false,
-		
+
 		/**
 		 * The jQuery object
-		 */		
-		 
+		 */
+
 		$el: false,
 
 		/**
 		 * The jQuery object (deprecated)
-		 */		
-		 
+		 */
+
 		$obj: false,
-		
+
 		/**
 		 * The items in the list
-		 */		
-		 
+		 */
+
 		items: [],
-		
+
 		/**
 		 * The last digit
-		 */		
-		 
+		 */
+
 		lastDigit: 0,
-			
+
 		/**
 		 * Constructor
 		 *
 		 * @param  object  A FlipClock.Factory object
 		 * @param  int     An integer use to select the correct digit
-		 * @param  object  An object to override the default properties	 
+		 * @param  object  An object to override the default properties
 		 */
-		 
+
 		constructor: function(factory, digit, options) {
 			this.factory = factory;
 			this.digit = digit;
 			this.lastDigit = digit;
 			this.$el = this.createList();
-			
+
 			// Depcrated support of the $obj property.
 			this.$obj = this.$el;
 
@@ -1031,13 +1031,13 @@ var FlipClock;
 
 			this.factory.$el.append(this.$el);
 		},
-		
+
 		/**
 		 * Select the digit in the list
 		 *
-		 * @param  int  A digit 0-9	 
+		 * @param  int  A digit 0-9
 		 */
-		 
+
 		select: function(digit) {
 			if(typeof digit === "undefined") {
 				digit = this.digit;
@@ -1057,21 +1057,21 @@ var FlipClock;
 				$delete.remove();
 
 				this.lastDigit = this.digit;
-			}	
+			}
 		},
-		
+
 		/**
 		 * Adds the play class to the DOM object
 		 */
-		 		
+
 		play: function() {
 			this.$el.addClass(this.factory.classes.play);
 		},
-		
+
 		/**
-		 * Removes the play class to the DOM object 
+		 * Removes the play class to the DOM object
 		 */
-		 
+
 		stop: function() {
 			var t = this;
 
@@ -1079,11 +1079,11 @@ var FlipClock;
 				t.$el.removeClass(t.factory.classes.play);
 			}, this.factory.timer.interval);
 		},
-		
+
 		/**
-		 * Creates the list item HTML and returns as a string 
+		 * Creates the list item HTML and returns as a string
 		 */
-		 
+
 		createListItem: function(css, value) {
 			return [
 				'<li class="'+(css ? css : '')+'">',
@@ -1102,7 +1102,7 @@ var FlipClock;
 		},
 
 		/**
-		 * Append the list item to the parent DOM node 
+		 * Append the list item to the parent DOM node
 		 */
 
 		appendListItem: function(css, value) {
@@ -1112,9 +1112,9 @@ var FlipClock;
 		},
 
 		/**
-		 * Create the list of digits and appends it to the DOM object 
+		 * Create the list of digits and appends it to the DOM object
 		 */
-		 
+
 		createList: function() {
 
 			var lastDigit = this.getPrevDigit() ? this.getPrevDigit() : this.digit;
@@ -1125,7 +1125,7 @@ var FlipClock;
 					this.createListItem(this.classes.active, this.digit),
 				'</ul>'
 			].join(''));
-					
+
 			return html;
 		},
 
@@ -1138,8 +1138,8 @@ var FlipClock;
 		}
 
 	});
-	
-	
+
+
 }(jQuery));
 
 /*jshint smarttabs:true */
@@ -1151,43 +1151,43 @@ var FlipClock;
  * @copyright  2013 - Objective HTML, LLC
  * @licesnse   http://www.opensource.org/licenses/mit-license.php
  */
-	
+
 (function($) {
-	
+
 	"use strict";
-	
+
 	/**
 	 * Capitalize the first letter in a string
 	 *
 	 * @return string
 	 */
-	 
+
 	String.prototype.ucfirst = function() {
 		return this.substr(0, 1).toUpperCase() + this.substr(1);
 	};
-	
+
 	/**
 	 * jQuery helper method
 	 *
 	 * @param  int     An integer used to start the clock (no. seconds)
-	 * @param  object  An object of properties to override the default	
+	 * @param  object  An object of properties to override the default
 	 */
-	 
-	$.fn.FlipClock = function(digit, options) {	
+
+	$.fn.FlipClock = function(digit, options) {
 		return new FlipClock($(this), digit, options);
 	};
-	
+
 	/**
 	 * jQuery helper method
 	 *
 	 * @param  int     An integer used to start the clock (no. seconds)
-	 * @param  object  An object of properties to override the default	
+	 * @param  object  An object of properties to override the default
 	 */
-	 
+
 	$.fn.flipClock = function(digit, options) {
 		return $.fn.FlipClock(digit, options);
 	};
-	
+
 }(jQuery));
 
 /*jshint smarttabs:true */
@@ -1199,39 +1199,39 @@ var FlipClock;
  * @copyright  2013 - Objective HTML, LLC
  * @licesnse   http://www.opensource.org/licenses/mit-license.php
  */
-	
+
 (function($) {
-	
+
 	"use strict";
-			
+
 	/**
-	 * The FlipClock Time class is used to manage all the time 
+	 * The FlipClock Time class is used to manage all the time
 	 * calculations.
 	 *
 	 * @param 	object  A FlipClock.Factory object
-	 * @param 	mixed   This is the digit used to set the clock. If an 
-	 *				    object is passed, 0 will be used.	
-	 * @param 	object  An object of properties to override the default	
+	 * @param 	mixed   This is the digit used to set the clock. If an
+	 *				    object is passed, 0 will be used.
+	 * @param 	object  An object of properties to override the default
 	 */
-	 	
+
 	FlipClock.Time = FlipClock.Base.extend({
-		
+
 		/**
 		 * The time (in seconds) or a date object
-		 */		
-		 
+		 */
+
 		time: 0,
-		
+
 		/**
 		 * The parent FlipClock.Factory object
-		 */		
-		 
+		 */
+
 		factory: false,
-		
+
 		/**
 		 * The minimum number of digits the clock face must have
-		 */		
-		 
+		 */
+
 		minimumDigits: 0,
 
 		/**
@@ -1239,9 +1239,9 @@ var FlipClock;
 		 *
 		 * @param  object  A FlipClock.Factory object
 		 * @param  int     An integer use to select the correct digit
-		 * @param  object  An object to override the default properties	 
+		 * @param  object  An object to override the default properties
 		 */
-		 
+
 		constructor: function(factory, time, options) {
 			if(typeof options != "object") {
 				options = {};
@@ -1262,69 +1262,69 @@ var FlipClock;
 		/**
 		 * Convert a string or integer to an array of digits
 		 *
-		 * @param   mixed  String or Integer of digits	 
-		 * @return  array  An array of digits 
+		 * @param   mixed  String or Integer of digits
+		 * @return  array  An array of digits
 		 */
-		 
+
 		convertDigitsToArray: function(str) {
 			var data = [];
-			
+
 			str = str.toString();
-			
+
 			for(var x = 0;x < str.length; x++) {
 				if(str[x].match(/^\d*$/g)) {
-					data.push(str[x]);	
+					data.push(str[x]);
 				}
 			}
-			
+
 			return data;
 		},
-		
+
 		/**
 		 * Get a specific digit from the time integer
 		 *
-		 * @param   int    The specific digit to select from the time	 
+		 * @param   int    The specific digit to select from the time
 		 * @return  mixed  Returns FALSE if no digit is found, otherwise
-		 *				   the method returns the defined digit	 
+		 *				   the method returns the defined digit
 		 */
-		 
+
 		digit: function(i) {
 			var timeStr = this.toString();
 			var length  = timeStr.length;
-			
+
 			if(timeStr[length - i])	 {
 				return timeStr[length - i];
 			}
-			
+
 			return false;
 		},
 
 		/**
 		 * Formats any array of digits into a valid array of digits
 		 *
-		 * @param   mixed  An array of digits	 
-		 * @return  array  An array of digits 
+		 * @param   mixed  An array of digits
+		 * @return  array  An array of digits
 		 */
-		 
+
 		digitize: function(obj) {
 			var data = [];
 
 			$.each(obj, function(i, value) {
 				value = value.toString();
-				
+
 				if(value.length == 1) {
 					value = '0'+value;
 				}
-				
+
 				for(var x = 0; x < value.length; x++) {
 					data.push(value.charAt(x));
-				}				
+				}
 			});
 
 			if(data.length > this.minimumDigits) {
 				this.minimumDigits = data.length;
 			}
-			
+
 			if(this.minimumDigits > data.length) {
 				for(var x = data.length; x < this.minimumDigits; x++) {
 					data.unshift('0');
@@ -1333,7 +1333,7 @@ var FlipClock;
 
 			return data;
 		},
-		
+
 		/**
 		 * Gets a new Date object for the current time
 		 *
@@ -1347,7 +1347,7 @@ var FlipClock;
 
 			return new Date((new Date()).getTime() + this.getTimeSeconds() * 1000);
 		},
-		
+
 		/**
 		 * Gets a digitized daily counter
 		 *
@@ -1374,66 +1374,66 @@ var FlipClock;
 		 * @param   bool  Should perform a modulus? If not sent, then no.
 		 * @return  int   Retuns a floored integer
 		 */
-		 
+
 		getDays: function(mod) {
 			var days = this.getTimeSeconds() / 60 / 60 / 24;
-			
+
 			if(mod) {
 				days = days % 7;
 			}
-			
+
 			return Math.floor(days);
 		},
-		
+
 		/**
 		 * Gets an hourly breakdown
 		 *
 		 * @return  object  Returns a digitized object
 		 */
-		 
+
 		getHourCounter: function() {
 			var obj = this.digitize([
 				this.getHours(),
 				this.getMinutes(true),
 				this.getSeconds(true)
 			]);
-			
+
 			return obj;
 		},
-		
+
 		/**
 		 * Gets an hourly breakdown
 		 *
 		 * @return  object  Returns a digitized object
 		 */
-		 
+
 		getHourly: function() {
 			return this.getHourCounter();
 		},
-		
+
 		/**
 		 * Gets number of hours
 		 *
 		 * @param   bool  Should perform a modulus? If not sent, then no.
 		 * @return  int   Retuns a floored integer
 		 */
-		 
+
 		getHours: function(mod) {
 			var hours = this.getTimeSeconds() / 60 / 60;
-			
+
 			if(mod) {
-				hours = hours % 24;	
+				hours = hours % 24;
 			}
-			
+
 			return Math.floor(hours);
 		},
-		
+
 		/**
 		 * Gets the twenty-four hour time
 		 *
 		 * @return  object  returns a digitized object
 		 */
-		 
+
 		getMilitaryTime: function(date, showSeconds) {
 			if(typeof showSeconds === "undefined") {
 				showSeconds = true;
@@ -1445,7 +1445,7 @@ var FlipClock;
 
 			var data  = [
 				date.getHours(),
-				date.getMinutes()			
+				date.getMinutes()
 			];
 
 			if(showSeconds === true) {
@@ -1454,28 +1454,28 @@ var FlipClock;
 
 			return this.digitize(data);
 		},
-				
+
 		/**
 		 * Gets number of minutes
 		 *
 		 * @param   bool  Should perform a modulus? If not sent, then no.
 		 * @return  int   Retuns a floored integer
 		 */
-		 
+
 		getMinutes: function(mod) {
 			var minutes = this.getTimeSeconds() / 60;
-			
+
 			if(mod) {
 				minutes = minutes % 60;
 			}
-			
+
 			return Math.floor(minutes);
 		},
-		
+
 		/**
 		 * Gets a minute breakdown
 		 */
-		 
+
 		getMinuteCounter: function() {
 			var obj = this.digitize([
 				this.getMinutes(),
@@ -1484,13 +1484,13 @@ var FlipClock;
 
 			return obj;
 		},
-		
+
 		/**
 		 * Gets time count in seconds regardless of if targetting date or not.
 		 *
 		 * @return  int   Returns a floored integer
 		 */
-		 
+
 		getTimeSeconds: function(date) {
 			if(!date) {
 				date = new Date();
@@ -1506,13 +1506,13 @@ var FlipClock;
 				return this.time;
 			}
 		},
-		
+
 		/**
 		 * Gets the current twelve hour time
 		 *
 		 * @return  object  Returns a digitized object
 		 */
-		 
+
 		getTime: function(date, showSeconds) {
 			if(typeof showSeconds === "undefined") {
 				showSeconds = true;
@@ -1524,12 +1524,12 @@ var FlipClock;
 
 			console.log(date);
 
-			
+
 			var hours = date.getHours();
 			var merid = hours > 12 ? 'PM' : 'AM';
 			var data   = [
 				hours > 12 ? hours - 12 : (hours === 0 ? 12 : hours),
-				date.getMinutes()			
+				date.getMinutes()
 			];
 
 			if(showSeconds === true) {
@@ -1538,17 +1538,17 @@ var FlipClock;
 
 			return this.digitize(data);
 		},
-		
+
 		/**
 		 * Gets number of seconds
 		 *
 		 * @param   bool  Should perform a modulus? If not sent, then no.
 		 * @return  int   Retuns a ceiled integer
 		 */
-		 
+
 		getSeconds: function(mod) {
 			var seconds = this.getTimeSeconds();
-			
+
 			if(mod) {
 				if(seconds == 60) {
 					seconds = 0;
@@ -1557,7 +1557,7 @@ var FlipClock;
 					seconds = seconds % 60;
 				}
 			}
-			
+
 			return Math.ceil(seconds);
 		},
 
@@ -1567,30 +1567,30 @@ var FlipClock;
 		 * @param   bool  Should perform a modulus? If not sent, then no.
 		 * @return  int   Retuns a floored integer
 		 */
-		 
+
 		getWeeks: function(mod) {
 			var weeks = this.getTimeSeconds() / 60 / 60 / 24 / 7;
-			
+
 			if(mod) {
 				weeks = weeks % 52;
 			}
-			
+
 			return Math.floor(weeks);
 		},
-		
+
 		/**
 		 * Removes a specific number of leading zeros from the array.
 		 * This method prevents you from removing too many digits, even
 		 * if you try.
 		 *
-		 * @param   int    Total number of digits to remove 
-		 * @return  array  An array of digits 
+		 * @param   int    Total number of digits to remove
+		 * @return  array  An array of digits
 		 */
-		 
+
 		removeLeadingZeros: function(totalDigits, digits) {
 			var total    = 0;
 			var newArray = [];
-			
+
 			$.each(digits, function(i, digit) {
 				if(i < totalDigits) {
 					total += parseInt(digits[i], 10);
@@ -1599,11 +1599,11 @@ var FlipClock;
 					newArray.push(digits[i]);
 				}
 			});
-			
+
 			if(total === 0) {
 				return newArray;
 			}
-			
+
 			return digits;
 		},
 
@@ -1648,25 +1648,25 @@ var FlipClock;
 		subSecond: function() {
 			this.subSeconds(1);
 		},
-		
+
 		/**
 		 * Converts the object to a human readable string
 		 */
-		 
+
 		toString: function() {
 			return this.getTimeSeconds().toString();
 		}
-		
+
 		/*
 		getYears: function() {
 			return Math.floor(this.time / 60 / 60 / 24 / 7 / 52);
 		},
-		
+
 		getDecades: function() {
 			return Math.floor(this.getWeeks() / 10);
 		}*/
 	});
-	
+
 }(jQuery));
 
 /*jshint smarttabs:true */
@@ -1678,24 +1678,24 @@ var FlipClock;
  * @copyright  2013 - Objective HTML, LLC
  * @licesnse   http://www.opensource.org/licenses/mit-license.php
  */
-	
+
 (function($) {
-	
+
 	"use strict";
-	
+
 	/**
 	 * The FlipClock.Timer object managers the JS timers
 	 *
 	 * @param	object  The parent FlipClock.Factory object
 	 * @param	object  Override the default options
 	 */
-	
+
 	FlipClock.Timer = FlipClock.Base.extend({
-		
+
 		/**
 		 * Callbacks
-		 */		
-		 
+		 */
+
 		callbacks: {
 			destroy: false,
 			create: false,
@@ -1705,194 +1705,194 @@ var FlipClock;
 			stop: false,
 			reset: false
 		},
-		
+
 		/**
 		 * FlipClock timer count (how many intervals have passed)
-		 */		
-		 
+		 */
+
 		count: 0,
-		
+
 		/**
 		 * The parent FlipClock.Factory object
-		 */		
-		 
+		 */
+
 		factory: false,
-		
+
 		/**
 		 * Timer interval (1 second by default)
-		 */		
-		 
+		 */
+
 		interval: 1000,
 
 		/**
 		 * The rate of the animation in milliseconds (not currently in use)
-		 */		
-		 
+		 */
+
 		animationRate: 1000,
-				
+
 		/**
 		 * Constructor
 		 *
 		 * @return	void
-		 */		
-		 
+		 */
+
 		constructor: function(factory, options) {
 			this.base(options);
 			this.factory = factory;
-			this.callback(this.callbacks.init);	
+			this.callback(this.callbacks.init);
 			this.callback(this.callbacks.create);
 		},
-		
+
 		/**
 		 * This method gets the elapsed the time as an interger
 		 *
 		 * @return	void
-		 */		
-		 
+		 */
+
 		getElapsed: function() {
 			return this.count * this.interval;
 		},
-		
+
 		/**
 		 * This method gets the elapsed the time as a Date object
 		 *
 		 * @return	void
-		 */		
-		 
+		 */
+
 		getElapsedTime: function() {
 			return new Date(this.time + this.getElapsed());
 		},
-		
+
 		/**
 		 * This method is resets the timer
 		 *
 		 * @param 	callback  This method resets the timer back to 0
 		 * @return	void
-		 */		
-		 
+		 */
+
 		reset: function(callback) {
 			clearInterval(this.timer);
 			this.count = 0;
-			this._setInterval(callback);			
+			this._setInterval(callback);
 			this.callback(this.callbacks.reset);
 		},
-		
+
 		/**
 		 * This method is starts the timer
 		 *
 		 * @param 	callback  A function that is called once the timer is destroyed
 		 * @return	void
-		 */		
-		 
-		start: function(callback) {		
+		 */
+
+		start: function(callback) {
 			this.factory.running = true;
 			this._createTimer(callback);
 			this.callback(this.callbacks.start);
 		},
-		
+
 		/**
 		 * This method is stops the timer
 		 *
 		 * @param 	callback  A function that is called once the timer is destroyed
 		 * @return	void
-		 */		
-		 
+		 */
+
 		stop: function(callback) {
 			this.factory.running = false;
 			this._clearInterval(callback);
 			this.callback(this.callbacks.stop);
 			this.callback(callback);
 		},
-		
+
 		/**
 		 * Clear the timer interval
 		 *
 		 * @return	void
-		 */		
-		 
+		 */
+
 		_clearInterval: function() {
 			clearInterval(this.timer);
 		},
-		
+
 		/**
 		 * Create the timer object
 		 *
 		 * @param 	callback  A function that is called once the timer is created
 		 * @return	void
-		 */		
-		 
+		 */
+
 		_createTimer: function(callback) {
-			this._setInterval(callback);		
+			this._setInterval(callback);
 		},
-		
+
 		/**
 		 * Destroy the timer object
 		 *
 		 * @param 	callback  A function that is called once the timer is destroyed
 		 * @return	void
-		 */		
-		 	
+		 */
+
 		_destroyTimer: function(callback) {
-			this._clearInterval();			
+			this._clearInterval();
 			this.timer = false;
 			this.callback(callback);
 			this.callback(this.callbacks.destroy);
 		},
-		
+
 		/**
 		 * This method is called each time the timer interval is ran
 		 *
 		 * @param 	callback  A function that is called once the timer is destroyed
 		 * @return	void
-		 */		
-		 
+		 */
+
 		_interval: function(callback) {
 			this.callback(this.callbacks.interval);
 			this.callback(callback);
 			this.count++;
 		},
-		
+
 		/**
 		 * This sets the timer interval
 		 *
 		 * @param 	callback  A function that is called once the timer is destroyed
 		 * @return	void
-		 */		
-		 
+		 */
+
 		_setInterval: function(callback) {
 			var t = this;
-	
+
 			t._interval(callback);
 
-			t.timer = setInterval(function() {		
+			t.timer = setInterval(function() {
 				t._interval(callback);
 			}, this.interval);
 		}
-			
+
 	});
-	
+
 }(jQuery));
 
 (function($) {
-	
+
 	/**
 	 * Twenty-Four Hour Clock Face
 	 *
 	 * This class will generate a twenty-four our clock for FlipClock.js
 	 *
 	 * @param  object  The parent FlipClock.Factory object
-	 * @param  object  An object of properties to override the default	
+	 * @param  object  An object of properties to override the default
 	 */
-	 
+
 	FlipClock.TwentyFourHourClockFace = FlipClock.Face.extend({
 
 		/**
 		 * Constructor
 		 *
 		 * @param  object  The parent FlipClock.Factory object
-		 * @param  object  An object of properties to override the default	
+		 * @param  object  An object of properties to override the default
 		 */
-		 
+
 		constructor: function(factory, options) {
 			this.base(factory, options);
 		},
@@ -1900,9 +1900,9 @@ var FlipClock;
 		/**
 		 * Build the clock face
 		 *
-		 * @param  object  Pass the time that should be used to display on the clock.	
+		 * @param  object  Pass the time that should be used to display on the clock.
 		 */
-		 
+
 		build: function(time) {
 			var t        = this;
 			var children = this.factory.$el.find('ul');
@@ -1920,33 +1920,33 @@ var FlipClock;
 					t.createList(digit);
 				});
 			}
-			
+
 			this.createDivider();
 			this.createDivider();
 
 			$(this.dividers[0]).insertBefore(this.lists[this.lists.length - 2].$el);
 			$(this.dividers[1]).insertBefore(this.lists[this.lists.length - 4].$el);
-			
+
 			this.base();
 		},
-		
+
 		/**
 		 * Flip the clock face
 		 */
-		 
+
 		flip: function(time, doNotAddPlayClass) {
 			this.autoIncrement();
-			
+
 			time = time ? time : this.factory.time.getMilitaryTime(false, this.showSeconds);
-			
-			this.base(time, doNotAddPlayClass);	
+
+			this.base(time, doNotAddPlayClass);
 		}
-				
+
 	});
-	
+
 }(jQuery));
 (function($) {
-		
+
 	/**
 	 * Counter Clock Face
 	 *
@@ -1954,11 +1954,11 @@ var FlipClock;
 	 * disabled. clock.increment() and clock.decrement() have been added.
 	 *
 	 * @param  object  The parent FlipClock.Factory object
-	 * @param  object  An object of properties to override the default	
+	 * @param  object  An object of properties to override the default
 	 */
-	 
+
 	FlipClock.CounterFace = FlipClock.Face.extend({
-		
+
 		/**
 		 * Tells the counter clock face if it should auto-increment
 		 */
@@ -1969,9 +1969,9 @@ var FlipClock;
 		 * Constructor
 		 *
 		 * @param  object  The parent FlipClock.Factory object
-		 * @param  object  An object of properties to override the default	
+		 * @param  object  An object of properties to override the default
 		 */
-		 
+
 		constructor: function(factory, options) {
 
 			if(typeof options != "object") {
@@ -2009,9 +2009,9 @@ var FlipClock;
 		},
 
 		/**
-		 * Build the clock face	
+		 * Build the clock face
 		 */
-		 
+
 		build: function() {
 			var t        = this;
 			var children = this.factory.$el.find('ul');
@@ -2023,7 +2023,7 @@ var FlipClock;
 
 					list.select(digit);
 				});
-			
+
 			}
 
 			$.each(this.lists, function(i, list) {
@@ -2032,17 +2032,17 @@ var FlipClock;
 
 			this.base();
 		},
-		
+
 		/**
 		 * Flip the clock face
 		 */
-		 
-		flip: function(time, doNotAddPlayClass) {			
+
+		flip: function(time, doNotAddPlayClass) {
 			if(this.shouldAutoIncrement) {
 				this.autoIncrement();
 			}
 
-			if(!time) {		
+			if(!time) {
 				time = this.factory.getTime().digitize([this.factory.getTime().time]);
 			}
 
@@ -2055,14 +2055,14 @@ var FlipClock;
 
 		reset: function() {
 			this.factory.time = new FlipClock.Time(
-				this.factory, 
+				this.factory,
 				this.factory.original ? Math.round(this.factory.original) : 0
 			);
 
 			this.flip();
 		}
 	});
-	
+
 }(jQuery));
 (function($) {
 
@@ -2143,71 +2143,71 @@ var FlipClock;
 
 }(jQuery));
 (function($) {
-			
+
 	/**
 	 * Hourly Counter Clock Face
 	 *
 	 * This class will generate an hourly counter for FlipClock.js. An
 	 * hour counter will track hours, minutes, and seconds. If number of
-	 * available digits is exceeded in the count, a new digit will be 
+	 * available digits is exceeded in the count, a new digit will be
 	 * created.
 	 *
 	 * @param  object  The parent FlipClock.Factory object
-	 * @param  object  An object of properties to override the default	
+	 * @param  object  An object of properties to override the default
 	 */
-	 
+
 	FlipClock.HourlyCounterFace = FlipClock.Face.extend({
-			
+
 		// clearExcessDigits: true,
 
 		/**
 		 * Constructor
 		 *
 		 * @param  object  The parent FlipClock.Factory object
-		 * @param  object  An object of properties to override the default	
+		 * @param  object  An object of properties to override the default
 		 */
-		 
+
 		constructor: function(factory, options) {
 			this.base(factory, options);
 		},
-		
+
 		/**
 		 * Build the clock face
 		 */
-		
+
 		build: function(excludeHours, time) {
 			var t = this;
 			var children = this.factory.$el.find('ul');
-			
+
 			time = time ? time : this.factory.time.getHourCounter();
-			
+
 			if(time.length > children.length) {
 				$.each(time, function(i, digit) {
 					t.createList(digit);
 				});
 			}
-			
+
 			$(this.createDivider('Seconds')).insertBefore(this.lists[this.lists.length - 2].$el);
 			$(this.createDivider('Minutes')).insertBefore(this.lists[this.lists.length - 4].$el);
-			
+
 			if(!excludeHours) {
 				$(this.createDivider('Hours', true)).insertBefore(this.lists[0].$el);
 			}
-			
+
 			this.base();
 		},
-		
+
 		/**
 		 * Flip the clock face
 		 */
-		 
+
 		flip: function(time, doNotAddPlayClass) {
 			if(!time) {
 				time = this.factory.time.getHourCounter();
-			}	
+			}
 
 			this.autoIncrement();
-		
+
 			this.base(time, doNotAddPlayClass);
 		},
 
@@ -2220,23 +2220,23 @@ var FlipClock;
 
 			this.dividers[0].insertAfter(this.dividers[0].next());
 		}
-		
+
 	});
-	
+
 }(jQuery));
 (function($) {
-		
+
 	/**
 	 * Minute Counter Clock Face
 	 *
 	 * This class will generate a minute counter for FlipClock.js. A
-	 * minute counter will track minutes and seconds. If an hour is 
+	 * minute counter will track minutes and seconds. If an hour is
 	 * reached, the counter will reset back to 0. (4 digits max)
 	 *
 	 * @param  object  The parent FlipClock.Factory object
-	 * @param  object  An object of properties to override the default	
+	 * @param  object  An object of properties to override the default
 	 */
-	 
+
 	FlipClock.MinuteCounterFace = FlipClock.HourlyCounterFace.extend({
 
 		clearExcessDigits: false,
@@ -2245,25 +2245,25 @@ var FlipClock;
 		 * Constructor
 		 *
 		 * @param  object  The parent FlipClock.Factory object
-		 * @param  object  An object of properties to override the default	
+		 * @param  object  An object of properties to override the default
 		 */
-		 
+
 		constructor: function(factory, options) {
 			this.base(factory, options);
 		},
-		
+
 		/**
-		 * Build the clock face	
+		 * Build the clock face
 		 */
-		 
+
 		build: function() {
 			this.base(true, this.factory.time.getMinuteCounter());
 		},
-		
+
 		/**
 		 * Flip the clock face
 		 */
-		 
+
 		flip: function(time, doNotAddPlayClass) {
 			if(!time) {
 				time = this.factory.time.getMinuteCounter();
@@ -2273,46 +2273,46 @@ var FlipClock;
 		}
 
 	});
-	
+
 }(jQuery));
 (function($) {
-		
+
 	/**
 	 * Twelve Hour Clock Face
 	 *
 	 * This class will generate a twelve hour clock for FlipClock.js
 	 *
 	 * @param  object  The parent FlipClock.Factory object
-	 * @param  object  An object of properties to override the default	
+	 * @param  object  An object of properties to override the default
 	 */
-	 
+
 	FlipClock.TwelveHourClockFace = FlipClock.TwentyFourHourClockFace.extend({
-		
+
 		/**
 		 * The meridium jQuery DOM object
 		 */
-		 
+
 		meridium: false,
-		
+
 		/**
 		 * The meridium text as string for easy access
 		 */
-		 
+
 		meridiumText: 'AM',
-					
+
 		/**
 		 * Build the clock face
 		 *
-		 * @param  object  Pass the time that should be used to display on the clock.	
+		 * @param  object  Pass the time that should be used to display on the clock.
 		 */
-		 
+
 		build: function() {
 			var t = this;
 
 			var time = this.factory.time.getTime(false, this.showSeconds);
 
-			this.base(time);			
-			this.meridiumText = this.getMeridium();			
+			this.base(time);
+			this.meridiumText = this.getMeridium();
 			this.meridium = $([
 				'<ul class="flip-clock-meridium">',
 					'<li>',
@@ -2320,38 +2320,38 @@ var FlipClock;
 					'</li>',
 				'</ul>'
 			].join(''));
-						
+
 			this.meridium.insertAfter(this.lists[this.lists.length-1].$el);
 		},
-		
+
 		/**
 		 * Flip the clock face
 		 */
-		 
-		flip: function(time, doNotAddPlayClass) {			
+
+		flip: function(time, doNotAddPlayClass) {
 			if(this.meridiumText != this.getMeridium()) {
 				this.meridiumText = this.getMeridium();
-				this.meridium.find('a').html(this.meridiumText);	
+				this.meridium.find('a').html(this.meridiumText);
 			}
-			this.base(this.factory.time.getTime(false, this.showSeconds), doNotAddPlayClass);	
+			this.base(this.factory.time.getTime(false, this.showSeconds), doNotAddPlayClass);
 		},
-		
+
 		/**
 		 * Get the current meridium
 		 *
 		 * @return  string  Returns the meridium (AM|PM)
 		 */
-		 
+
 		getMeridium: function() {
 			return new Date().getHours() >= 12 ? 'PM' : 'AM';
 		},
-		
+
 		/**
 		 * Is it currently in the post-medirium?
 		 *
 		 * @return  bool  Returns true or false
 		 */
-		 
+
 		isPM: function() {
 			return this.getMeridium() == 'PM' ? true : false;
 		},
@@ -2361,13 +2361,13 @@ var FlipClock;
 		 *
 		 * @return  bool  Returns true or false
 		 */
-		 
+
 		isAM: function() {
 			return this.getMeridium() == 'AM' ? true : false;
 		}
-				
+
 	});
-	
+
 }(jQuery));
 (function($) {
 
@@ -2397,25 +2397,25 @@ var FlipClock;
 
 }(jQuery));
 (function($) {
-		
+
 	/**
 	 * FlipClock Danish Language Pack
 	 *
 	 * This class will used to translate tokens into the Danish language.
-	 *	
+	 *
 	 */
-	 
+
 	FlipClock.Lang.Danish = {
-		
+
 		'years'   : 'År',
 		'months'  : 'Måneder',
 		'days'    : 'Dage',
 		'hours'   : 'Timer',
 		'minutes' : 'Minutter',
-		'seconds' : 'Sekunder'	
+		'seconds' : 'Sekunder'
 
 	};
-	
+
 	/* Create various aliases for convenience */
 
 	FlipClock.Lang['da']     = FlipClock.Lang.Danish;
@@ -2424,52 +2424,52 @@ var FlipClock;
 
 }(jQuery));
 (function($) {
-		
+
 	/**
 	 * FlipClock German Language Pack
 	 *
 	 * This class will used to translate tokens into the German language.
-	 *	
+	 *
 	 */
-	 
+
 	FlipClock.Lang.German = {
-		
+
 		'years'   : 'Jahre',
 		'months'  : 'Monate',
 		'days'    : 'Tage',
 		'hours'   : 'Stunden',
 		'minutes' : 'Minuten',
-		'seconds' : 'Sekunden'	
- 
+		'seconds' : 'Sekunden'
+
 	};
-	
+
 	/* Create various aliases for convenience */
- 
+
 	FlipClock.Lang['de']     = FlipClock.Lang.German;
 	FlipClock.Lang['de-de']  = FlipClock.Lang.German;
 	FlipClock.Lang['german'] = FlipClock.Lang.German;
- 
+
 }(jQuery));
 (function($) {
-		
+
 	/**
 	 * FlipClock English Language Pack
 	 *
 	 * This class will used to translate tokens into the English language.
-	 *	
+	 *
 	 */
-	 
+
 	FlipClock.Lang.English = {
-		
+
 		'years'   : 'Years',
 		'months'  : 'Months',
 		'days'    : 'Days',
 		'hours'   : 'Hours',
 		'minutes' : 'Minutes',
-		'seconds' : 'Seconds'	
+		'seconds' : 'Seconds'
 
 	};
-	
+
 	/* Create various aliases for convenience */
 
 	FlipClock.Lang['en']      = FlipClock.Lang.English;
@@ -2505,25 +2505,25 @@ var FlipClock;
 
 }(jQuery));
 (function($) {
-		
+
 	/**
 	 * FlipClock Finnish Language Pack
 	 *
 	 * This class will used to translate tokens into the Finnish language.
-	 *	
+	 *
 	 */
-	 
+
 	FlipClock.Lang.Finnish = {
-		
+
 		'years'   : 'Vuotta',
 		'months'  : 'Kuukautta',
 		'days'    : 'Päivää',
 		'hours'   : 'Tuntia',
 		'minutes' : 'Minuuttia',
-		'seconds' : 'Sekuntia'	
+		'seconds' : 'Sekuntia'
 
 	};
-	
+
 	/* Create various aliases for convenience */
 
 	FlipClock.Lang['fi']      = FlipClock.Lang.Finnish;
@@ -2561,31 +2561,31 @@ var FlipClock;
 }(jQuery));
 
 (function($) {
-		
+
 	/**
 	 * FlipClock Italian Language Pack
 	 *
 	 * This class will used to translate tokens into the Italian language.
-	 *	
+	 *
 	 */
-	 
+
 	FlipClock.Lang.Italian = {
-		
+
 		'years'   : 'Anni',
 		'months'  : 'Mesi',
 		'days'    : 'Giorni',
 		'hours'   : 'Ore',
 		'minutes' : 'Minuti',
-		'seconds' : 'Secondi'	
+		'seconds' : 'Secondi'
 
 	};
-	
+
 	/* Create various aliases for convenience */
 
 	FlipClock.Lang['it']      = FlipClock.Lang.Italian;
 	FlipClock.Lang['it-it']   = FlipClock.Lang.Italian;
 	FlipClock.Lang['italian'] = FlipClock.Lang.Italian;
-	
+
 }(jQuery));
 
 (function($) {
@@ -2648,7 +2648,7 @@ var FlipClock;
 	 * FlipClock Norwegian-Bokmål Language Pack
 	 *
 	 * This class will used to translate tokens into the Norwegian language.
-	 *	
+	 *
 	 */
 
 	FlipClock.Lang.Norwegian = {
@@ -2658,7 +2658,7 @@ var FlipClock;
 		'days'    : 'Dager',
 		'hours'   : 'Timer',
 		'minutes' : 'Minutter',
-		'seconds' : 'Sekunder'	
+		'seconds' : 'Sekunder'
 
 	};
 
@@ -2726,25 +2726,25 @@ var FlipClock;
 
 }(jQuery));
 (function($) {
-		
+
 	/**
 	 * FlipClock Swedish Language Pack
 	 *
 	 * This class will used to translate tokens into the Swedish language.
-	 *	
+	 *
 	 */
-	 
+
 	FlipClock.Lang.Swedish = {
-		
+
 		'years'   : 'År',
 		'months'  : 'Månader',
 		'days'    : 'Dagar',
 		'hours'   : 'Timmar',
 		'minutes' : 'Minuter',
-		'seconds' : 'Sekunder'	
+		'seconds' : 'Sekunder'
 
 	};
-	
+
 	/* Create various aliases for convenience */
 
 	FlipClock.Lang['sv']      = FlipClock.Lang.Swedish;
@@ -2754,16 +2754,16 @@ var FlipClock;
 }(jQuery));
 
 (function($) {
-		
+
 	/**
 	 * FlipClock Chinese Language Pack
 	 *
 	 * This class will used to translate tokens into the Chinese language.
-	 *	
+	 *
 	 */
-	 
+
 	FlipClock.Lang.Chinese = {
-		
+
 		'years'   : '年',
 		'months'  : '月',
 		'days'    : '日',
@@ -2772,11 +2772,36 @@ var FlipClock;
 		'seconds' : '秒'
 
 	};
-	
+
 	/* Create various aliases for convenience */
 
 	FlipClock.Lang['zh']      = FlipClock.Lang.Chinese;
 	FlipClock.Lang['zh-cn']   = FlipClock.Lang.Chinese;
 	FlipClock.Lang['chinese'] = FlipClock.Lang.Chinese;
 
-}(jQuery));
\ No newline at end of file
+}(jQuery));
+(function($) {
+
+	/**
+	 * FlipClock Traditional Chinese Language Pack
+	 *
+	 * This class will used to translate tokens into the Traditional Chinese.
+	 *
+	 */
+
+	FlipClock.Lang.TraditionalChinese = {
+
+		'years'   : '年',
+		'months'  : '月',
+		'days'    : '日',
+		'hours'   : '時',
+		'minutes' : '分',
+		'seconds' : '秒'
+
+	};
+
+	/* Create various aliases for convenience */
+
+	FlipClock.Lang['zh-tw']   = FlipClock.Lang.TraditionalChinese;
+
+}(jQuery));
diff --git a/compiled/flipclock.min.js b/compiled/flipclock.min.js
index 7c2ca7e..2c75ac2 100644
--- a/compiled/flipclock.min.js
+++ b/compiled/flipclock.min.js
@@ -1,2 +1,57 @@
-/*! flipclock 2015-08-31 */
-var Base=function(){};Base.extend=function(a,b){"use strict";var c=Base.prototype.extend;Base._prototyping=!0;var d=new this;c.call(d,a),d.base=function(){},delete Base._prototyping;var e=d.constructor,f=d.constructor=function(){if(!Base._prototyping)if(this._constructing||this.constructor==f)this._constructing=!0,e.apply(this,arguments),delete this._constructing;else if(null!==arguments[0])return(arguments[0].extend||c).call(arguments[0],d)};return f.ancestor=this,f.extend=this.extend,f.forEach=this.forEach,f.implement=this.implement,f.prototype=d,f.toString=this.toString,f.valueOf=function(a){return"object"==a?f:e.valueOf()},c.call(f,b),"function"==typeof f.init&&f.init(),f},Base.prototype={extend:function(a,b){if(arguments.length>1){var c=this[a];if(c&&"function"==typeof b&&(!c.valueOf||c.valueOf()!=b.valueOf())&&/\bbase\b/.test(b)){var d=b.valueOf();b=function(){var a=this.base||Base.prototype.base;this.base=c;var b=d.apply(this,arguments);return this.base=a,b},b.valueOf=function(a){return"object"==a?b:d},b.toString=Base.toString}this[a]=b}else if(a){var e=Base.prototype.extend;Base._prototyping||"function"==typeof this||(e=this.extend||e);for(var f={toSource:null},g=["constructor","toString","valueOf"],h=Base._prototyping?0:1;i=g[h++];)a[i]!=f[i]&&e.call(this,i,a[i]);for(var i in a)f[i]||e.call(this,i,a[i])}return this}},Base=Base.extend({constructor:function(){this.extend(arguments[0])}},{ancestor:Object,version:"1.1",forEach:function(a,b,c){for(var d in a)void 0===this.prototype[d]&&b.call(c,a[d],d,a)},implement:function(){for(var a=0;a<arguments.length;a++)"function"==typeof arguments[a]?arguments[a](this.prototype):this.prototype.extend(arguments[a]);return this},toString:function(){return String(this.valueOf())}});var FlipClock;!function(a){"use strict";FlipClock=function(a,b,c){return b instanceof Object&&b instanceof Date==!1&&(c=b,b=0),new FlipClock.Factory(a,b,c)},FlipClock.Lang={},FlipClock.Base=Base.extend({buildDate:"2014-12-12",version:"0.7.7",constructor:function(b,c){"object"!=typeof b&&(b={}),"object"!=typeof c&&(c={}),this.setOptions(a.extend(!0,{},b,c))},callback:function(a){if("function"==typeof a){for(var b=[],c=1;c<=arguments.length;c++)arguments[c]&&b.push(arguments[c]);a.apply(this,b)}},log:function(a){window.console&&console.log&&console.log(a)},getOption:function(a){return this[a]?this[a]:!1},getOptions:function(){return this},setOption:function(a,b){this[a]=b},setOptions:function(a){for(var b in a)"undefined"!=typeof a[b]&&this.setOption(b,a[b])}})}(jQuery),function(a){"use strict";FlipClock.Face=FlipClock.Base.extend({autoStart:!0,dividers:[],factory:!1,lists:[],constructor:function(a,b){this.dividers=[],this.lists=[],this.base(b),this.factory=a},build:function(){this.autoStart&&this.start()},createDivider:function(b,c,d){"boolean"!=typeof c&&c||(d=c,c=b);var e=['<span class="'+this.factory.classes.dot+' top"></span>','<span class="'+this.factory.classes.dot+' bottom"></span>'].join("");d&&(e=""),b=this.factory.localize(b);var f=['<span class="'+this.factory.classes.divider+" "+(c?c:"").toLowerCase()+'">','<span class="'+this.factory.classes.label+'">'+(b?b:"")+"</span>",e,"</span>"],g=a(f.join(""));return this.dividers.push(g),g},createList:function(a,b){"object"==typeof a&&(b=a,a=0);var c=new FlipClock.List(this.factory,a,b);return this.lists.push(c),c},reset:function(){this.factory.time=new FlipClock.Time(this.factory,this.factory.original?Math.round(this.factory.original):0,{minimumDigits:this.factory.minimumDigits}),this.flip(this.factory.original,!1)},appendDigitToClock:function(a){a.$el.append(!1)},addDigit:function(a){var b=this.createList(a,{classes:{active:this.factory.classes.active,before:this.factory.classes.before,flip:this.factory.classes.flip}});this.appendDigitToClock(b)},start:function(){},stop:function(){},autoIncrement:function(){this.factory.countdown?this.decrement():this.increment()},increment:function(){this.factory.time.addSecond()},decrement:function(){0==this.factory.time.getTimeSeconds()?this.factory.stop():this.factory.time.subSecond()},flip:function(b,c){var d=this;a.each(b,function(a,b){var e=d.lists[a];e?(c||b==e.digit||e.play(),e.select(b)):d.addDigit(b)})}})}(jQuery),function(a){"use strict";FlipClock.Factory=FlipClock.Base.extend({animationRate:1e3,autoStart:!0,callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},classes:{active:"flip-clock-active",before:"flip-clock-before",divider:"flip-clock-divider",dot:"flip-clock-dot",label:"flip-clock-label",flip:"flip",play:"play",wrapper:"flip-clock-wrapper"},clockFace:"HourlyCounter",countdown:!1,defaultClockFace:"HourlyCounter",defaultLanguage:"english",$el:!1,face:!0,lang:!1,language:"english",minimumDigits:0,original:!1,running:!1,time:!1,timer:!1,$wrapper:!1,constructor:function(b,c,d){d||(d={}),this.lists=[],this.running=!1,this.base(d),this.$el=a(b).addClass(this.classes.wrapper),this.$wrapper=this.$el,this.original=c instanceof Date?c:c?Math.round(c):0,this.time=new FlipClock.Time(this,this.original,{minimumDigits:this.minimumDigits,animationRate:this.animationRate}),this.timer=new FlipClock.Timer(this,d),this.loadLanguage(this.language),this.loadClockFace(this.clockFace,d),this.autoStart&&this.start()},loadClockFace:function(a,b){var c,d="Face",e=!1;return a=a.ucfirst()+d,this.face.stop&&(this.stop(),e=!0),this.$el.html(""),this.time.minimumDigits=this.minimumDigits,c=FlipClock[a]?new FlipClock[a](this,b):new FlipClock[this.defaultClockFace+d](this,b),c.build(),this.face=c,e&&this.start(),this.face},loadLanguage:function(a){var b;return b=FlipClock.Lang[a.ucfirst()]?FlipClock.Lang[a.ucfirst()]:FlipClock.Lang[a]?FlipClock.Lang[a]:FlipClock.Lang[this.defaultLanguage],this.lang=b},localize:function(a,b){var c=this.lang;if(!a)return null;var d=a.toLowerCase();return"object"==typeof b&&(c=b),c&&c[d]?c[d]:a},start:function(a){var b=this;b.running||b.countdown&&!(b.countdown&&b.time.time>0)?b.log("Trying to start timer when countdown already at 0"):(b.face.start(b.time),b.timer.start(function(){b.flip(),"function"==typeof a&&a()}))},stop:function(a){this.face.stop(),this.timer.stop(a);for(var b in this.lists)this.lists.hasOwnProperty(b)&&this.lists[b].stop()},reset:function(a){this.timer.reset(a),this.face.reset()},setTime:function(a){this.time.time=a,this.flip(!0)},getTime:function(a){return this.time},setCountdown:function(a){var b=this.running;this.countdown=a?!0:!1,b&&(this.stop(),this.start())},flip:function(a){this.face.flip(!1,a)}})}(jQuery),function(a){"use strict";FlipClock.List=FlipClock.Base.extend({digit:0,classes:{active:"flip-clock-active",before:"flip-clock-before",flip:"flip"},factory:!1,$el:!1,$obj:!1,items:[],lastDigit:0,constructor:function(a,b,c){this.factory=a,this.digit=b,this.lastDigit=b,this.$el=this.createList(),this.$obj=this.$el,b>0&&this.select(b),this.factory.$el.append(this.$el)},select:function(a){if("undefined"==typeof a?a=this.digit:this.digit=a,this.digit!=this.lastDigit){var b=this.$el.find("."+this.classes.before).removeClass(this.classes.before);this.$el.find("."+this.classes.active).removeClass(this.classes.active).addClass(this.classes.before),this.appendListItem(this.classes.active,this.digit),b.remove(),this.lastDigit=this.digit}},play:function(){this.$el.addClass(this.factory.classes.play)},stop:function(){var a=this;setTimeout(function(){a.$el.removeClass(a.factory.classes.play)},this.factory.timer.interval)},createListItem:function(a,b){return['<li class="'+(a?a:"")+'">','<a href="#">','<div class="up">','<div class="shadow"></div>','<div class="inn">'+(b?b:"")+"</div>","</div>",'<div class="down">','<div class="shadow"></div>','<div class="inn">'+(b?b:"")+"</div>","</div>","</a>","</li>"].join("")},appendListItem:function(a,b){var c=this.createListItem(a,b);this.$el.append(c)},createList:function(){var b=this.getPrevDigit()?this.getPrevDigit():this.digit,c=a(['<ul class="'+this.classes.flip+" "+(this.factory.running?this.factory.classes.play:"")+'">',this.createListItem(this.classes.before,b),this.createListItem(this.classes.active,this.digit),"</ul>"].join(""));return c},getNextDigit:function(){return 9==this.digit?0:this.digit+1},getPrevDigit:function(){return 0==this.digit?9:this.digit-1}})}(jQuery),function(a){"use strict";String.prototype.ucfirst=function(){return this.substr(0,1).toUpperCase()+this.substr(1)},a.fn.FlipClock=function(b,c){return new FlipClock(a(this),b,c)},a.fn.flipClock=function(b,c){return a.fn.FlipClock(b,c)}}(jQuery),function(a){"use strict";FlipClock.Time=FlipClock.Base.extend({time:0,factory:!1,minimumDigits:0,constructor:function(a,b,c){"object"!=typeof c&&(c={}),c.minimumDigits||(c.minimumDigits=a.minimumDigits),this.base(c),this.factory=a,b&&(this.time=b)},convertDigitsToArray:function(a){var b=[];a=a.toString();for(var c=0;c<a.length;c++)a[c].match(/^\d*$/g)&&b.push(a[c]);return b},digit:function(a){var b=this.toString(),c=b.length;return b[c-a]?b[c-a]:!1},digitize:function(b){var c=[];if(a.each(b,function(a,b){b=b.toString(),1==b.length&&(b="0"+b);for(var d=0;d<b.length;d++)c.push(b.charAt(d))}),c.length>this.minimumDigits&&(this.minimumDigits=c.length),this.minimumDigits>c.length)for(var d=c.length;d<this.minimumDigits;d++)c.unshift("0");return c},getDateObject:function(){return this.time instanceof Date?this.time:new Date((new Date).getTime()+1e3*this.getTimeSeconds())},getDayCounter:function(a){var b=[this.getDays(),this.getHours(!0),this.getMinutes(!0)];return a&&b.push(this.getSeconds(!0)),this.digitize(b)},getDays:function(a){var b=this.getTimeSeconds()/60/60/24;return a&&(b%=7),Math.floor(b)},getHourCounter:function(){var a=this.digitize([this.getHours(),this.getMinutes(!0),this.getSeconds(!0)]);return a},getHourly:function(){return this.getHourCounter()},getHours:function(a){var b=this.getTimeSeconds()/60/60;return a&&(b%=24),Math.floor(b)},getMilitaryTime:function(a,b){"undefined"==typeof b&&(b=!0),a||(a=this.getDateObject());var c=[a.getHours(),a.getMinutes()];return b===!0&&c.push(a.getSeconds()),this.digitize(c)},getMinutes:function(a){var b=this.getTimeSeconds()/60;return a&&(b%=60),Math.floor(b)},getMinuteCounter:function(){var a=this.digitize([this.getMinutes(),this.getSeconds(!0)]);return a},getTimeSeconds:function(a){return a||(a=new Date),this.time instanceof Date?this.factory.countdown?Math.max(this.time.getTime()/1e3-a.getTime()/1e3,0):a.getTime()/1e3-this.time.getTime()/1e3:this.time},getTime:function(a,b){"undefined"==typeof b&&(b=!0),a||(a=this.getDateObject()),console.log(a);var c=a.getHours(),d=[c>12?c-12:0===c?12:c,a.getMinutes()];return b===!0&&d.push(a.getSeconds()),this.digitize(d)},getSeconds:function(a){var b=this.getTimeSeconds();return a&&(60==b?b=0:b%=60),Math.ceil(b)},getWeeks:function(a){var b=this.getTimeSeconds()/60/60/24/7;return a&&(b%=52),Math.floor(b)},removeLeadingZeros:function(b,c){var d=0,e=[];return a.each(c,function(a,f){b>a?d+=parseInt(c[a],10):e.push(c[a])}),0===d?e:c},addSeconds:function(a){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()+a):this.time+=a},addSecond:function(){this.addSeconds(1)},subSeconds:function(a){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()-a):this.time-=a},subSecond:function(){this.subSeconds(1)},toString:function(){return this.getTimeSeconds().toString()}})}(jQuery),function(a){"use strict";FlipClock.Timer=FlipClock.Base.extend({callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},count:0,factory:!1,interval:1e3,animationRate:1e3,constructor:function(a,b){this.base(b),this.factory=a,this.callback(this.callbacks.init),this.callback(this.callbacks.create)},getElapsed:function(){return this.count*this.interval},getElapsedTime:function(){return new Date(this.time+this.getElapsed())},reset:function(a){clearInterval(this.timer),this.count=0,this._setInterval(a),this.callback(this.callbacks.reset)},start:function(a){this.factory.running=!0,this._createTimer(a),this.callback(this.callbacks.start)},stop:function(a){this.factory.running=!1,this._clearInterval(a),this.callback(this.callbacks.stop),this.callback(a)},_clearInterval:function(){clearInterval(this.timer)},_createTimer:function(a){this._setInterval(a)},_destroyTimer:function(a){this._clearInterval(),this.timer=!1,this.callback(a),this.callback(this.callbacks.destroy)},_interval:function(a){this.callback(this.callbacks.interval),this.callback(a),this.count++},_setInterval:function(a){var b=this;b._interval(a),b.timer=setInterval(function(){b._interval(a)},this.interval)}})}(jQuery),function(a){FlipClock.TwentyFourHourClockFace=FlipClock.Face.extend({constructor:function(a,b){this.base(a,b)},build:function(b){var c=this,d=this.factory.$el.find("ul");this.factory.time.time||(this.factory.original=new Date,this.factory.time=new FlipClock.Time(this.factory,this.factory.original));var b=b?b:this.factory.time.getMilitaryTime(!1,this.showSeconds);b.length>d.length&&a.each(b,function(a,b){c.createList(b)}),this.createDivider(),this.createDivider(),a(this.dividers[0]).insertBefore(this.lists[this.lists.length-2].$el),a(this.dividers[1]).insertBefore(this.lists[this.lists.length-4].$el),this.base()},flip:function(a,b){this.autoIncrement(),a=a?a:this.factory.time.getMilitaryTime(!1,this.showSeconds),this.base(a,b)}})}(jQuery),function(a){FlipClock.CounterFace=FlipClock.Face.extend({shouldAutoIncrement:!1,constructor:function(a,b){"object"!=typeof b&&(b={}),a.autoStart=b.autoStart?!0:!1,b.autoStart&&(this.shouldAutoIncrement=!0),a.increment=function(){a.countdown=!1,a.setTime(a.getTime().getTimeSeconds()+1)},a.decrement=function(){a.countdown=!0;var b=a.getTime().getTimeSeconds();b>0&&a.setTime(b-1)},a.setValue=function(b){a.setTime(b)},a.setCounter=function(b){a.setTime(b)},this.base(a,b)},build:function(){var b=this,c=this.factory.$el.find("ul"),d=this.factory.getTime().digitize([this.factory.getTime().time]);d.length>c.length&&a.each(d,function(a,c){var d=b.createList(c);d.select(c)}),a.each(this.lists,function(a,b){b.play()}),this.base()},flip:function(a,b){this.shouldAutoIncrement&&this.autoIncrement(),a||(a=this.factory.getTime().digitize([this.factory.getTime().time])),this.base(a,b)},reset:function(){this.factory.time=new FlipClock.Time(this.factory,this.factory.original?Math.round(this.factory.original):0),this.flip()}})}(jQuery),function(a){FlipClock.DailyCounterFace=FlipClock.Face.extend({showSeconds:!0,constructor:function(a,b){this.base(a,b)},build:function(b){var c=this,d=this.factory.$el.find("ul"),e=0;b=b?b:this.factory.time.getDayCounter(this.showSeconds),b.length>d.length&&a.each(b,function(a,b){c.createList(b)}),this.showSeconds?a(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el):e=2,a(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4+e].$el),a(this.createDivider("Hours")).insertBefore(this.lists[this.lists.length-6+e].$el),a(this.createDivider("Days",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(a,b){a||(a=this.factory.time.getDayCounter(this.showSeconds)),this.autoIncrement(),this.base(a,b)}})}(jQuery),function(a){FlipClock.HourlyCounterFace=FlipClock.Face.extend({constructor:function(a,b){this.base(a,b)},build:function(b,c){var d=this,e=this.factory.$el.find("ul");c=c?c:this.factory.time.getHourCounter(),c.length>e.length&&a.each(c,function(a,b){d.createList(b)}),a(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el),a(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4].$el),b||a(this.createDivider("Hours",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(a,b){a||(a=this.factory.time.getHourCounter()),this.autoIncrement(),this.base(a,b)},appendDigitToClock:function(a){this.base(a),this.dividers[0].insertAfter(this.dividers[0].next())}})}(jQuery),function(a){FlipClock.MinuteCounterFace=FlipClock.HourlyCounterFace.extend({clearExcessDigits:!1,constructor:function(a,b){this.base(a,b)},build:function(){this.base(!0,this.factory.time.getMinuteCounter())},flip:function(a,b){a||(a=this.factory.time.getMinuteCounter()),this.base(a,b)}})}(jQuery),function(a){FlipClock.TwelveHourClockFace=FlipClock.TwentyFourHourClockFace.extend({meridium:!1,meridiumText:"AM",build:function(){var b=this.factory.time.getTime(!1,this.showSeconds);this.base(b),this.meridiumText=this.getMeridium(),this.meridium=a(['<ul class="flip-clock-meridium">',"<li>",'<a href="#">'+this.meridiumText+"</a>","</li>","</ul>"].join("")),this.meridium.insertAfter(this.lists[this.lists.length-1].$el)},flip:function(a,b){this.meridiumText!=this.getMeridium()&&(this.meridiumText=this.getMeridium(),this.meridium.find("a").html(this.meridiumText)),this.base(this.factory.time.getTime(!1,this.showSeconds),b)},getMeridium:function(){return(new Date).getHours()>=12?"PM":"AM"},isPM:function(){return"PM"==this.getMeridium()?!0:!1},isAM:function(){return"AM"==this.getMeridium()?!0:!1}})}(jQuery),function(a){FlipClock.Lang.Arabic={years:"سنوات",months:"شهور",days:"أيام",hours:"ساعات",minutes:"دقائق",seconds:"ثواني"},FlipClock.Lang.ar=FlipClock.Lang.Arabic,FlipClock.Lang["ar-ar"]=FlipClock.Lang.Arabic,FlipClock.Lang.arabic=FlipClock.Lang.Arabic}(jQuery),function(a){FlipClock.Lang.Danish={years:"År",months:"Måneder",days:"Dage",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.da=FlipClock.Lang.Danish,FlipClock.Lang["da-dk"]=FlipClock.Lang.Danish,FlipClock.Lang.danish=FlipClock.Lang.Danish}(jQuery),function(a){FlipClock.Lang.German={years:"Jahre",months:"Monate",days:"Tage",hours:"Stunden",minutes:"Minuten",seconds:"Sekunden"},FlipClock.Lang.de=FlipClock.Lang.German,FlipClock.Lang["de-de"]=FlipClock.Lang.German,FlipClock.Lang.german=FlipClock.Lang.German}(jQuery),function(a){FlipClock.Lang.English={years:"Years",months:"Months",days:"Days",hours:"Hours",minutes:"Minutes",seconds:"Seconds"},FlipClock.Lang.en=FlipClock.Lang.English,FlipClock.Lang["en-us"]=FlipClock.Lang.English,FlipClock.Lang.english=FlipClock.Lang.English}(jQuery),function(a){FlipClock.Lang.Spanish={years:"Años",months:"Meses",days:"Días",hours:"Horas",minutes:"Minutos",seconds:"Segundos"},FlipClock.Lang.es=FlipClock.Lang.Spanish,FlipClock.Lang["es-es"]=FlipClock.Lang.Spanish,FlipClock.Lang.spanish=FlipClock.Lang.Spanish}(jQuery),function(a){FlipClock.Lang.Finnish={years:"Vuotta",months:"Kuukautta",days:"Päivää",hours:"Tuntia",minutes:"Minuuttia",seconds:"Sekuntia"},FlipClock.Lang.fi=FlipClock.Lang.Finnish,FlipClock.Lang["fi-fi"]=FlipClock.Lang.Finnish,FlipClock.Lang.finnish=FlipClock.Lang.Finnish}(jQuery),function(a){FlipClock.Lang.French={years:"Ans",months:"Mois",days:"Jours",hours:"Heures",minutes:"Minutes",seconds:"Secondes"},FlipClock.Lang.fr=FlipClock.Lang.French,FlipClock.Lang["fr-ca"]=FlipClock.Lang.French,FlipClock.Lang.french=FlipClock.Lang.French}(jQuery),function(a){FlipClock.Lang.Italian={years:"Anni",months:"Mesi",days:"Giorni",hours:"Ore",minutes:"Minuti",seconds:"Secondi"},FlipClock.Lang.it=FlipClock.Lang.Italian,FlipClock.Lang["it-it"]=FlipClock.Lang.Italian,FlipClock.Lang.italian=FlipClock.Lang.Italian}(jQuery),function(a){FlipClock.Lang.Latvian={years:"Gadi",months:"Mēneši",days:"Dienas",hours:"Stundas",minutes:"Minūtes",seconds:"Sekundes"},FlipClock.Lang.lv=FlipClock.Lang.Latvian,FlipClock.Lang["lv-lv"]=FlipClock.Lang.Latvian,FlipClock.Lang.latvian=FlipClock.Lang.Latvian}(jQuery),function(a){FlipClock.Lang.Dutch={years:"Jaren",months:"Maanden",days:"Dagen",hours:"Uren",minutes:"Minuten",seconds:"Seconden"},FlipClock.Lang.nl=FlipClock.Lang.Dutch,FlipClock.Lang["nl-be"]=FlipClock.Lang.Dutch,FlipClock.Lang.dutch=FlipClock.Lang.Dutch}(jQuery),function(a){FlipClock.Lang.Norwegian={years:"År",months:"Måneder",days:"Dager",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.no=FlipClock.Lang.Norwegian,FlipClock.Lang.nb=FlipClock.Lang.Norwegian,FlipClock.Lang["no-nb"]=FlipClock.Lang.Norwegian,FlipClock.Lang.norwegian=FlipClock.Lang.Norwegian}(jQuery),function(a){FlipClock.Lang.Portuguese={years:"Anos",months:"Meses",days:"Dias",hours:"Horas",minutes:"Minutos",seconds:"Segundos"},FlipClock.Lang.pt=FlipClock.Lang.Portuguese,FlipClock.Lang["pt-br"]=FlipClock.Lang.Portuguese,FlipClock.Lang.portuguese=FlipClock.Lang.Portuguese}(jQuery),function(a){FlipClock.Lang.Russian={years:"лет",months:"месяцев",days:"дней",hours:"часов",minutes:"минут",seconds:"секунд"},FlipClock.Lang.ru=FlipClock.Lang.Russian,FlipClock.Lang["ru-ru"]=FlipClock.Lang.Russian,FlipClock.Lang.russian=FlipClock.Lang.Russian}(jQuery),function(a){FlipClock.Lang.Swedish={years:"År",months:"Månader",days:"Dagar",hours:"Timmar",minutes:"Minuter",seconds:"Sekunder"},FlipClock.Lang.sv=FlipClock.Lang.Swedish,FlipClock.Lang["sv-se"]=FlipClock.Lang.Swedish,FlipClock.Lang.swedish=FlipClock.Lang.Swedish}(jQuery),function(a){FlipClock.Lang.Chinese={years:"年",months:"月",days:"日",hours:"时",minutes:"分",seconds:"秒"},FlipClock.Lang.zh=FlipClock.Lang.Chinese,FlipClock.Lang["zh-cn"]=FlipClock.Lang.Chinese,FlipClock.Lang.chinese=FlipClock.Lang.Chinese}(jQuery);
\ No newline at end of file
+var FlipClock,Base=function(){};Base.extend=function(t,i){"use strict";var e=Base.prototype.extend;Base._prototyping=!0;var s=new this;e.call(s,t),s.base=function(){},delete Base._prototyping;var n=s.constructor,o=s.constructor=function(){if(!Base._prototyping)if(this._constructing||this.constructor==o)this._constructing=!0,n.apply(this,arguments),delete this._constructing;else if(null!==arguments[0])return(arguments[0].extend||e).call(arguments[0],s)};return o.ancestor=this,o.extend=this.extend,o.forEach=this.forEach,o.implement=this.implement,o.prototype=s,o.toString=this.toString,o.valueOf=function(t){return"object"==t?o:n.valueOf()},e.call(o,i),"function"==typeof o.init&&o.init(),o},Base.prototype={extend:function(t,i){if(arguments.length>1){var e=this[t];if(e&&"function"==typeof i&&(!e.valueOf||e.valueOf()!=i.valueOf())&&/\bbase\b/.test(i)){var s=i.valueOf();i=function(){var t=this.base||Base.prototype.base;this.base=e;var i=s.apply(this,arguments);return this.base=t,i},i.valueOf=function(t){return"object"==t?i:s},i.toString=Base.toString}this[t]=i}else if(t){var n=Base.prototype.extend;Base._prototyping||"function"==typeof this||(n=this.extend||n);for(var o={toSource:null},a=["constructor","toString","valueOf"],c=Base._prototyping?0:1;r=a[c++];)t[r]!=o[r]&&n.call(this,r,t[r]);for(var r in t)o[r]||n.call(this,r,t[r])}return this}},Base=Base.extend({constructor:function(){this.extend(arguments[0])}},{ancestor:Object,version:"1.1",forEach:function(t,i,e){for(var s in t)void 0===this.prototype[s]&&i.call(e,t[s],s,t)},implement:function(){for(var t=0;t<arguments.length;t++)"function"==typeof arguments[t]?arguments[t](this.prototype):this.prototype.extend(arguments[t]);return this},toString:function(){return String(this.valueOf())}}),
+/**
+ * FlipClock.js
+ *
+ * @author     Justin Kimbrell
+ * @copyright  2013 - Objective HTML, LLC
+ * @licesnse   http://www.opensource.org/licenses/mit-license.php
+ */
+function(t){"use strict";(FlipClock=function(t,i,e){return i instanceof Object&&i instanceof Date==!1&&(e=i,i=0),new FlipClock.Factory(t,i,e)}).Lang={},FlipClock.Base=Base.extend({buildDate:"2014-12-12",version:"0.7.7",constructor:function(i,e){"object"!=typeof i&&(i={}),"object"!=typeof e&&(e={}),this.setOptions(t.extend(!0,{},i,e))},callback:function(t){if("function"==typeof t){for(var i=[],e=1;e<=arguments.length;e++)arguments[e]&&i.push(arguments[e]);t.apply(this,i)}},log:function(t){window.console&&console.log&&console.log(t)},getOption:function(t){return!!this[t]&&this[t]},getOptions:function(){return this},setOption:function(t,i){this[t]=i},setOptions:function(t){for(var i in t)void 0!==t[i]&&this.setOption(i,t[i])}})}(jQuery),
+/**
+ * FlipClock.js
+ *
+ * @author     Justin Kimbrell
+ * @copyright  2013 - Objective HTML, LLC
+ * @licesnse   http://www.opensource.org/licenses/mit-license.php
+ */
+function(t){"use strict";FlipClock.Face=FlipClock.Base.extend({autoStart:!0,dividers:[],factory:!1,lists:[],constructor:function(t,i){this.dividers=[],this.lists=[],this.base(i),this.factory=t},build:function(){this.autoStart&&this.start()},createDivider:function(i,e,s){"boolean"!=typeof e&&e||(s=e,e=i);var n=['<span class="'+this.factory.classes.dot+' top"></span>','<span class="'+this.factory.classes.dot+' bottom"></span>'].join("");s&&(n=""),i=this.factory.localize(i);var o=['<span class="'+this.factory.classes.divider+" "+(e||"").toLowerCase()+'">','<span class="'+this.factory.classes.label+'">'+(i||"")+"</span>",n,"</span>"],a=t(o.join(""));return this.dividers.push(a),a},createList:function(t,i){"object"==typeof t&&(i=t,t=0);var e=new FlipClock.List(this.factory,t,i);return this.lists.push(e),e},reset:function(){this.factory.time=new FlipClock.Time(this.factory,this.factory.original?Math.round(this.factory.original):0,{minimumDigits:this.factory.minimumDigits}),this.flip(this.factory.original,!1)},appendDigitToClock:function(t){t.$el.append(!1)},addDigit:function(t){var i=this.createList(t,{classes:{active:this.factory.classes.active,before:this.factory.classes.before,flip:this.factory.classes.flip}});this.appendDigitToClock(i)},start:function(){},stop:function(){},autoIncrement:function(){this.factory.countdown?this.decrement():this.increment()},increment:function(){this.factory.time.addSecond()},decrement:function(){0==this.factory.time.getTimeSeconds()?this.factory.stop():this.factory.time.subSecond()},flip:function(i,e){var s=this;t.each(i,(function(t,i){var n=s.lists[t];n?(e||i==n.digit||n.play(),n.select(i)):s.addDigit(i)}))}})}(jQuery),
+/**
+ * FlipClock.js
+ *
+ * @author     Justin Kimbrell
+ * @copyright  2013 - Objective HTML, LLC
+ * @licesnse   http://www.opensource.org/licenses/mit-license.php
+ */
+function(t){"use strict";FlipClock.Factory=FlipClock.Base.extend({animationRate:1e3,autoStart:!0,callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},classes:{active:"flip-clock-active",before:"flip-clock-before",divider:"flip-clock-divider",dot:"flip-clock-dot",label:"flip-clock-label",flip:"flip",play:"play",wrapper:"flip-clock-wrapper"},clockFace:"HourlyCounter",countdown:!1,defaultClockFace:"HourlyCounter",defaultLanguage:"english",$el:!1,face:!0,lang:!1,language:"english",minimumDigits:0,original:!1,running:!1,time:!1,timer:!1,$wrapper:!1,constructor:function(i,e,s){s||(s={}),this.lists=[],this.running=!1,this.base(s),this.$el=t(i).addClass(this.classes.wrapper),this.$wrapper=this.$el,this.original=e instanceof Date?e:e?Math.round(e):0,this.time=new FlipClock.Time(this,this.original,{minimumDigits:this.minimumDigits,animationRate:this.animationRate}),this.timer=new FlipClock.Timer(this,s),this.loadLanguage(this.language),this.loadClockFace(this.clockFace,s),this.autoStart&&this.start()},loadClockFace:function(t,i){var e,s="Face",n=!1;return t=t.ucfirst()+s,this.face.stop&&(this.stop(),n=!0),this.$el.html(""),this.time.minimumDigits=this.minimumDigits,(e=FlipClock[t]?new FlipClock[t](this,i):new FlipClock[this.defaultClockFace+s](this,i)).build(),this.face=e,n&&this.start(),this.face},loadLanguage:function(t){var i;return i=FlipClock.Lang[t.ucfirst()]?FlipClock.Lang[t.ucfirst()]:FlipClock.Lang[t]?FlipClock.Lang[t]:FlipClock.Lang[this.defaultLanguage],this.lang=i},localize:function(t,i){var e=this.lang;if(!t)return null;var s=t.toLowerCase();return"object"==typeof i&&(e=i),e&&e[s]?e[s]:t},start:function(t){var i=this;i.running||i.countdown&&!(i.countdown&&i.time.time>0)?i.log("Trying to start timer when countdown already at 0"):(i.face.start(i.time),i.timer.start((function(){i.flip(),"function"==typeof t&&t()})))},stop:function(t){for(var i in this.face.stop(),this.timer.stop(t),this.lists)this.lists.hasOwnProperty(i)&&this.lists[i].stop()},reset:function(t){this.timer.reset(t),this.face.reset()},setTime:function(t){this.time.time=t,this.flip(!0)},getTime:function(t){return this.time},setCountdown:function(t){var i=this.running;this.countdown=!!t,i&&(this.stop(),this.start())},flip:function(t){this.face.flip(!1,t)}})}(jQuery),
+/**
+ * FlipClock.js
+ *
+ * @author     Justin Kimbrell
+ * @copyright  2013 - Objective HTML, LLC
+ * @licesnse   http://www.opensource.org/licenses/mit-license.php
+ */
+function(t){"use strict";FlipClock.List=FlipClock.Base.extend({digit:0,classes:{active:"flip-clock-active",before:"flip-clock-before",flip:"flip"},factory:!1,$el:!1,$obj:!1,items:[],lastDigit:0,constructor:function(t,i,e){this.factory=t,this.digit=i,this.lastDigit=i,this.$el=this.createList(),this.$obj=this.$el,i>0&&this.select(i),this.factory.$el.append(this.$el)},select:function(t){if(void 0===t?t=this.digit:this.digit=t,this.digit!=this.lastDigit){var i=this.$el.find("."+this.classes.before).removeClass(this.classes.before);this.$el.find("."+this.classes.active).removeClass(this.classes.active).addClass(this.classes.before),this.appendListItem(this.classes.active,this.digit),i.remove(),this.lastDigit=this.digit}},play:function(){this.$el.addClass(this.factory.classes.play)},stop:function(){var t=this;setTimeout((function(){t.$el.removeClass(t.factory.classes.play)}),this.factory.timer.interval)},createListItem:function(t,i){return['<li class="'+(t||"")+'">','<a href="#">','<div class="up">','<div class="shadow"></div>','<div class="inn">'+(i||"")+"</div>","</div>",'<div class="down">','<div class="shadow"></div>','<div class="inn">'+(i||"")+"</div>","</div>","</a>","</li>"].join("")},appendListItem:function(t,i){var e=this.createListItem(t,i);this.$el.append(e)},createList:function(){var i=this.getPrevDigit()?this.getPrevDigit():this.digit;return t(['<ul class="'+this.classes.flip+" "+(this.factory.running?this.factory.classes.play:"")+'">',this.createListItem(this.classes.before,i),this.createListItem(this.classes.active,this.digit),"</ul>"].join(""))},getNextDigit:function(){return 9==this.digit?0:this.digit+1},getPrevDigit:function(){return 0==this.digit?9:this.digit-1}})}(jQuery),
+/**
+ * FlipClock.js
+ *
+ * @author     Justin Kimbrell
+ * @copyright  2013 - Objective HTML, LLC
+ * @licesnse   http://www.opensource.org/licenses/mit-license.php
+ */
+function(t){"use strict";String.prototype.ucfirst=function(){return this.substr(0,1).toUpperCase()+this.substr(1)},t.fn.FlipClock=function(i,e){return new FlipClock(t(this),i,e)},t.fn.flipClock=function(i,e){return t.fn.FlipClock(i,e)}}(jQuery),
+/**
+ * FlipClock.js
+ *
+ * @author     Justin Kimbrell
+ * @copyright  2013 - Objective HTML, LLC
+ * @licesnse   http://www.opensource.org/licenses/mit-license.php
+ */
+function(t){"use strict";FlipClock.Time=FlipClock.Base.extend({time:0,factory:!1,minimumDigits:0,constructor:function(t,i,e){"object"!=typeof e&&(e={}),e.minimumDigits||(e.minimumDigits=t.minimumDigits),this.base(e),this.factory=t,i&&(this.time=i)},convertDigitsToArray:function(t){var i=[];t=t.toString();for(var e=0;e<t.length;e++)t[e].match(/^\d*$/g)&&i.push(t[e]);return i},digit:function(t){var i=this.toString(),e=i.length;return!!i[e-t]&&i[e-t]},digitize:function(i){var e=[];if(t.each(i,(function(t,i){1==(i=i.toString()).length&&(i="0"+i);for(var s=0;s<i.length;s++)e.push(i.charAt(s))})),e.length>this.minimumDigits&&(this.minimumDigits=e.length),this.minimumDigits>e.length)for(var s=e.length;s<this.minimumDigits;s++)e.unshift("0");return e},getDateObject:function(){return this.time instanceof Date?this.time:new Date((new Date).getTime()+1e3*this.getTimeSeconds())},getDayCounter:function(t){var i=[this.getDays(),this.getHours(!0),this.getMinutes(!0)];return t&&i.push(this.getSeconds(!0)),this.digitize(i)},getDays:function(t){var i=this.getTimeSeconds()/60/60/24;return t&&(i%=7),Math.floor(i)},getHourCounter:function(){return this.digitize([this.getHours(),this.getMinutes(!0),this.getSeconds(!0)])},getHourly:function(){return this.getHourCounter()},getHours:function(t){var i=this.getTimeSeconds()/60/60;return t&&(i%=24),Math.floor(i)},getMilitaryTime:function(t,i){void 0===i&&(i=!0),t||(t=this.getDateObject());var e=[t.getHours(),t.getMinutes()];return!0===i&&e.push(t.getSeconds()),this.digitize(e)},getMinutes:function(t){var i=this.getTimeSeconds()/60;return t&&(i%=60),Math.floor(i)},getMinuteCounter:function(){return this.digitize([this.getMinutes(),this.getSeconds(!0)])},getTimeSeconds:function(t){return t||(t=new Date),this.time instanceof Date?this.factory.countdown?Math.max(this.time.getTime()/1e3-t.getTime()/1e3,0):t.getTime()/1e3-this.time.getTime()/1e3:this.time},getTime:function(t,i){void 0===i&&(i=!0),t||(t=this.getDateObject()),console.log(t);var e=t.getHours(),s=[e>12?e-12:0===e?12:e,t.getMinutes()];return!0===i&&s.push(t.getSeconds()),this.digitize(s)},getSeconds:function(t){var i=this.getTimeSeconds();return t&&(60==i?i=0:i%=60),Math.ceil(i)},getWeeks:function(t){var i=this.getTimeSeconds()/60/60/24/7;return t&&(i%=52),Math.floor(i)},removeLeadingZeros:function(i,e){var s=0,n=[];return t.each(e,(function(t,o){t<i?s+=parseInt(e[t],10):n.push(e[t])})),0===s?n:e},addSeconds:function(t){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()+t):this.time+=t},addSecond:function(){this.addSeconds(1)},subSeconds:function(t){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()-t):this.time-=t},subSecond:function(){this.subSeconds(1)},toString:function(){return this.getTimeSeconds().toString()}})}(jQuery),
+/**
+ * FlipClock.js
+ *
+ * @author     Justin Kimbrell
+ * @copyright  2013 - Objective HTML, LLC
+ * @licesnse   http://www.opensource.org/licenses/mit-license.php
+ */
+function(t){"use strict";FlipClock.Timer=FlipClock.Base.extend({callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},count:0,factory:!1,interval:1e3,animationRate:1e3,constructor:function(t,i){this.base(i),this.factory=t,this.callback(this.callbacks.init),this.callback(this.callbacks.create)},getElapsed:function(){return this.count*this.interval},getElapsedTime:function(){return new Date(this.time+this.getElapsed())},reset:function(t){clearInterval(this.timer),this.count=0,this._setInterval(t),this.callback(this.callbacks.reset)},start:function(t){this.factory.running=!0,this._createTimer(t),this.callback(this.callbacks.start)},stop:function(t){this.factory.running=!1,this._clearInterval(t),this.callback(this.callbacks.stop),this.callback(t)},_clearInterval:function(){clearInterval(this.timer)},_createTimer:function(t){this._setInterval(t)},_destroyTimer:function(t){this._clearInterval(),this.timer=!1,this.callback(t),this.callback(this.callbacks.destroy)},_interval:function(t){this.callback(this.callbacks.interval),this.callback(t),this.count++},_setInterval:function(t){var i=this;i._interval(t),i.timer=setInterval((function(){i._interval(t)}),this.interval)}})}(jQuery),function(t){FlipClock.TwentyFourHourClockFace=FlipClock.Face.extend({constructor:function(t,i){this.base(t,i)},build:function(i){var e=this,s=this.factory.$el.find("ul");this.factory.time.time||(this.factory.original=new Date,this.factory.time=new FlipClock.Time(this.factory,this.factory.original)),(i=i||this.factory.time.getMilitaryTime(!1,this.showSeconds)).length>s.length&&t.each(i,(function(t,i){e.createList(i)})),this.createDivider(),this.createDivider(),t(this.dividers[0]).insertBefore(this.lists[this.lists.length-2].$el),t(this.dividers[1]).insertBefore(this.lists[this.lists.length-4].$el),this.base()},flip:function(t,i){this.autoIncrement(),t=t||this.factory.time.getMilitaryTime(!1,this.showSeconds),this.base(t,i)}})}(jQuery),function(t){FlipClock.CounterFace=FlipClock.Face.extend({shouldAutoIncrement:!1,constructor:function(t,i){"object"!=typeof i&&(i={}),t.autoStart=!!i.autoStart,i.autoStart&&(this.shouldAutoIncrement=!0),t.increment=function(){t.countdown=!1,t.setTime(t.getTime().getTimeSeconds()+1)},t.decrement=function(){t.countdown=!0;var i=t.getTime().getTimeSeconds();i>0&&t.setTime(i-1)},t.setValue=function(i){t.setTime(i)},t.setCounter=function(i){t.setTime(i)},this.base(t,i)},build:function(){var i=this,e=this.factory.$el.find("ul"),s=this.factory.getTime().digitize([this.factory.getTime().time]);s.length>e.length&&t.each(s,(function(t,e){i.createList(e).select(e)})),t.each(this.lists,(function(t,i){i.play()})),this.base()},flip:function(t,i){this.shouldAutoIncrement&&this.autoIncrement(),t||(t=this.factory.getTime().digitize([this.factory.getTime().time])),this.base(t,i)},reset:function(){this.factory.time=new FlipClock.Time(this.factory,this.factory.original?Math.round(this.factory.original):0),this.flip()}})}(jQuery),function(t){FlipClock.DailyCounterFace=FlipClock.Face.extend({showSeconds:!0,constructor:function(t,i){this.base(t,i)},build:function(i){var e=this,s=this.factory.$el.find("ul"),n=0;(i=i||this.factory.time.getDayCounter(this.showSeconds)).length>s.length&&t.each(i,(function(t,i){e.createList(i)})),this.showSeconds?t(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el):n=2,t(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4+n].$el),t(this.createDivider("Hours")).insertBefore(this.lists[this.lists.length-6+n].$el),t(this.createDivider("Days",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(t,i){t||(t=this.factory.time.getDayCounter(this.showSeconds)),this.autoIncrement(),this.base(t,i)}})}(jQuery),function(t){FlipClock.HourlyCounterFace=FlipClock.Face.extend({constructor:function(t,i){this.base(t,i)},build:function(i,e){var s=this,n=this.factory.$el.find("ul");(e=e||this.factory.time.getHourCounter()).length>n.length&&t.each(e,(function(t,i){s.createList(i)})),t(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el),t(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4].$el),i||t(this.createDivider("Hours",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(t,i){t||(t=this.factory.time.getHourCounter()),this.autoIncrement(),this.base(t,i)},appendDigitToClock:function(t){this.base(t),this.dividers[0].insertAfter(this.dividers[0].next())}})}(jQuery),jQuery,FlipClock.MinuteCounterFace=FlipClock.HourlyCounterFace.extend({clearExcessDigits:!1,constructor:function(t,i){this.base(t,i)},build:function(){this.base(!0,this.factory.time.getMinuteCounter())},flip:function(t,i){t||(t=this.factory.time.getMinuteCounter()),this.base(t,i)}}),function(t){FlipClock.TwelveHourClockFace=FlipClock.TwentyFourHourClockFace.extend({meridium:!1,meridiumText:"AM",build:function(){var i=this.factory.time.getTime(!1,this.showSeconds);this.base(i),this.meridiumText=this.getMeridium(),this.meridium=t(['<ul class="flip-clock-meridium">',"<li>",'<a href="#">'+this.meridiumText+"</a>","</li>","</ul>"].join("")),this.meridium.insertAfter(this.lists[this.lists.length-1].$el)},flip:function(t,i){this.meridiumText!=this.getMeridium()&&(this.meridiumText=this.getMeridium(),this.meridium.find("a").html(this.meridiumText)),this.base(this.factory.time.getTime(!1,this.showSeconds),i)},getMeridium:function(){return(new Date).getHours()>=12?"PM":"AM"},isPM:function(){return"PM"==this.getMeridium()},isAM:function(){return"AM"==this.getMeridium()}})}(jQuery),jQuery,FlipClock.Lang.Arabic={years:"سنوات",months:"شهور",days:"أيام",hours:"ساعات",minutes:"دقائق",seconds:"ثواني"},FlipClock.Lang.ar=FlipClock.Lang.Arabic,FlipClock.Lang["ar-ar"]=FlipClock.Lang.Arabic,FlipClock.Lang.arabic=FlipClock.Lang.Arabic,jQuery,FlipClock.Lang.Danish={years:"År",months:"Måneder",days:"Dage",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.da=FlipClock.Lang.Danish,FlipClock.Lang["da-dk"]=FlipClock.Lang.Danish,FlipClock.Lang.danish=FlipClock.Lang.Danish,jQuery,FlipClock.Lang.German={years:"Jahre",months:"Monate",days:"Tage",hours:"Stunden",minutes:"Minuten",seconds:"Sekunden"},FlipClock.Lang.de=FlipClock.Lang.German,FlipClock.Lang["de-de"]=FlipClock.Lang.German,FlipClock.Lang.german=FlipClock.Lang.German,jQuery,FlipClock.Lang.English={years:"Years",months:"Months",days:"Days",hours:"Hours",minutes:"Minutes",seconds:"Seconds"},FlipClock.Lang.en=FlipClock.Lang.English,FlipClock.Lang["en-us"]=FlipClock.Lang.English,FlipClock.Lang.english=FlipClock.Lang.English,jQuery,FlipClock.Lang.Spanish={years:"Años",months:"Meses",days:"Días",hours:"Horas",minutes:"Minutos",seconds:"Segundos"},FlipClock.Lang.es=FlipClock.Lang.Spanish,FlipClock.Lang["es-es"]=FlipClock.Lang.Spanish,FlipClock.Lang.spanish=FlipClock.Lang.Spanish,jQuery,FlipClock.Lang.Finnish={years:"Vuotta",months:"Kuukautta",days:"Päivää",hours:"Tuntia",minutes:"Minuuttia",seconds:"Sekuntia"},FlipClock.Lang.fi=FlipClock.Lang.Finnish,FlipClock.Lang["fi-fi"]=FlipClock.Lang.Finnish,FlipClock.Lang.finnish=FlipClock.Lang.Finnish,jQuery,FlipClock.Lang.French={years:"Ans",months:"Mois",days:"Jours",hours:"Heures",minutes:"Minutes",seconds:"Secondes"},FlipClock.Lang.fr=FlipClock.Lang.French,FlipClock.Lang["fr-ca"]=FlipClock.Lang.French,FlipClock.Lang.french=FlipClock.Lang.French,jQuery,FlipClock.Lang.Italian={years:"Anni",months:"Mesi",days:"Giorni",hours:"Ore",minutes:"Minuti",seconds:"Secondi"},FlipClock.Lang.it=FlipClock.Lang.Italian,FlipClock.Lang["it-it"]=FlipClock.Lang.Italian,FlipClock.Lang.italian=FlipClock.Lang.Italian,jQuery,FlipClock.Lang.Latvian={years:"Gadi",months:"Mēneši",days:"Dienas",hours:"Stundas",minutes:"Minūtes",seconds:"Sekundes"},FlipClock.Lang.lv=FlipClock.Lang.Latvian,FlipClock.Lang["lv-lv"]=FlipClock.Lang.Latvian,FlipClock.Lang.latvian=FlipClock.Lang.Latvian,jQuery,FlipClock.Lang.Dutch={years:"Jaren",months:"Maanden",days:"Dagen",hours:"Uren",minutes:"Minuten",seconds:"Seconden"},FlipClock.Lang.nl=FlipClock.Lang.Dutch,FlipClock.Lang["nl-be"]=FlipClock.Lang.Dutch,FlipClock.Lang.dutch=FlipClock.Lang.Dutch,jQuery,FlipClock.Lang.Norwegian={years:"År",months:"Måneder",days:"Dager",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.no=FlipClock.Lang.Norwegian,FlipClock.Lang.nb=FlipClock.Lang.Norwegian,FlipClock.Lang["no-nb"]=FlipClock.Lang.Norwegian,FlipClock.Lang.norwegian=FlipClock.Lang.Norwegian,jQuery,FlipClock.Lang.Portuguese={years:"Anos",months:"Meses",days:"Dias",hours:"Horas",minutes:"Minutos",seconds:"Segundos"},FlipClock.Lang.pt=FlipClock.Lang.Portuguese,FlipClock.Lang["pt-br"]=FlipClock.Lang.Portuguese,FlipClock.Lang.portuguese=FlipClock.Lang.Portuguese,jQuery,FlipClock.Lang.Russian={years:"лет",months:"месяцев",days:"дней",hours:"часов",minutes:"минут",seconds:"секунд"},FlipClock.Lang.ru=FlipClock.Lang.Russian,FlipClock.Lang["ru-ru"]=FlipClock.Lang.Russian,FlipClock.Lang.russian=FlipClock.Lang.Russian,jQuery,FlipClock.Lang.Swedish={years:"År",months:"Månader",days:"Dagar",hours:"Timmar",minutes:"Minuter",seconds:"Sekunder"},FlipClock.Lang.sv=FlipClock.Lang.Swedish,FlipClock.Lang["sv-se"]=FlipClock.Lang.Swedish,FlipClock.Lang.swedish=FlipClock.Lang.Swedish,jQuery,FlipClock.Lang.Chinese={years:"年",months:"月",days:"日",hours:"时",minutes:"分",seconds:"秒"},FlipClock.Lang.zh=FlipClock.Lang.Chinese,FlipClock.Lang["zh-cn"]=FlipClock.Lang.Chinese,FlipClock.Lang.chinese=FlipClock.Lang.Chinese,jQuery,FlipClock.Lang.TraditionalChinese={years:"年",months:"月",days:"日",hours:"時",minutes:"分",seconds:"秒"},FlipClock.Lang["zh-tw"]=FlipClock.Lang.TraditionalChinese;
